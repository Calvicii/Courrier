// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.Constants;
import io.github.jwharm.javagi.base.FunctionPointer;
import io.github.jwharm.javagi.base.GErrorException;
import io.github.jwharm.javagi.base.GLibLogger;
import io.github.jwharm.javagi.base.Out;
import io.github.jwharm.javagi.base.Proxy;
import io.github.jwharm.javagi.gobject.BuilderInterface;
import io.github.jwharm.javagi.gobject.InstanceCache;
import io.github.jwharm.javagi.gobject.SignalConnection;
import io.github.jwharm.javagi.gobject.types.Overrides;
import io.github.jwharm.javagi.gobject.types.Signals;
import io.github.jwharm.javagi.gobject.types.Types;
import io.github.jwharm.javagi.interop.ArenaCloseAction;
import io.github.jwharm.javagi.interop.Arenas;
import io.github.jwharm.javagi.interop.Interop;
import io.github.jwharm.javagi.interop.MemoryCleaner;
import java.lang.Deprecated;
import java.lang.FunctionalInterface;
import java.lang.Integer;
import java.lang.NullPointerException;
import java.lang.String;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.annotation.processing.Generated;
import org.gnome.gio.AsyncReadyCallback;
import org.gnome.gio.AsyncResult;
import org.gnome.gio.Cancellable;
import org.gnome.gio.DBusInterfaceInfo;
import org.gnome.gio.DBusMethodInvocation;
import org.gnome.glib.GLib;
import org.gnome.glib.LogLevelFlags;
import org.gnome.glib.Type;
import org.gnome.gobject.GObject;
import org.gnome.gobject.GObjects;
import org.gnome.gobject.TypeInstance;
import org.gnome.gobject.TypeInterface;
import org.gnome.gobject.Value;
import org.jetbrains.annotations.Nullable;

/**
 * Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Account.top_of_page"&gt;org.gnome.OnlineAccounts.Account&lt;/link&gt;.
 */
@Generated("io.github.jwharm.JavaGI")
public interface Account extends Proxy {
    /**
     * Get the GType of the Account class
     *
     * @return the GType
     */
    static Type getType() {
        return Interop.getType("goa_account_get_type");
    }

    /**
     * Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Account.top_of_page"&gt;org.gnome.OnlineAccounts.Account&lt;/link&gt; D-Bus interface.
     *
     * @return A {@code GDBusInterfaceInfo}. Do not free.
     */
    static DBusInterfaceInfo interfaceInfo() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) AccountMethodHandles.goa_account_interface_info.invokeExact();
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        DBusInterfaceInfo _returnValue = MemorySegment.NULL.equals(_result) ? null : new DBusInterfaceInfo(_result);
        _returnValue.address = GObjects.boxedCopy(DBusInterfaceInfo.getType(), _returnValue.handle());
        MemoryCleaner.takeOwnership(_returnValue);
        MemoryCleaner.setBoxedType(_returnValue, DBusInterfaceInfo.getType());
        return _returnValue;
    }

    /**
     * Overrides all {@code GObject} properties in the {@code GoaAccount} interface for a concrete class.
     * The properties are overridden in the order they are defined.
     *
     * @param klass The class structure for a {@code GObject} derived class.
     * @param propertyIdBegin The property id to assign to the first overridden property.
     * @return The last property id.
     */
    static int overrideProperties(GObject.ObjectClass klass, int propertyIdBegin) {
        int _result;
        try {
            _result = (int) AccountMethodHandles.goa_account_override_properties.invokeExact(
                    (MemorySegment) (klass == null ? MemorySegment.NULL : klass.handle()), 
                    propertyIdBegin);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        int _returnValue = _result;
        return _returnValue;
    }

    /**
     * Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.EnsureCredentials"&gt;EnsureCredentials()&lt;/link&gt; D-Bus method on this Account.
     * When the operation is finished, {@code callback} will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
     * You can then call goa_account_call_ensure_credentials_finish() to get the result of the operation.
     * <p>
     * See goa_account_call_ensure_credentials_sync() for the synchronous, blocking version of this method.
     *
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @param callback A {@code GAsyncReadyCallback} to call when the request is satisfied or {@code null}.
     */
    default void callEnsureCredentials(@Nullable Cancellable cancellable,
            @Nullable AsyncReadyCallback callback) {
        try (var _arena = Arena.ofConfined()) {
            final Arena _callbackScope = Arena.ofShared();
            if (callback != null) ArenaCloseAction.CLEANER.register(callback, new ArenaCloseAction(_callbackScope));
            try {
                AccountMethodHandles.goa_account_call_ensure_credentials.invokeExact(handle(), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), 
                        (MemorySegment) (callback == null ? MemorySegment.NULL : callback.toCallback(_callbackScope)), 
                        MemorySegment.NULL);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Finishes an operation started with goa_account_call_ensure_credentials().
     *
     * @param outExpiresIn Return location for return parameter or {@code null} to ignore.
     * @param res The {@code GAsyncResult} obtained from the {@code GAsyncReadyCallback} passed to goa_account_call_ensure_credentials().
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    default boolean callEnsureCredentialsFinish(@Nullable Out<Integer> outExpiresIn,
            AsyncResult res) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _outExpiresInPointer = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) AccountMethodHandles.goa_account_call_ensure_credentials_finish.invokeExact(
                        handle(), 
                        (MemorySegment) (outExpiresIn == null ? MemorySegment.NULL : _outExpiresInPointer), 
                        (MemorySegment) (res == null ? MemorySegment.NULL : res.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            if (outExpiresIn != null) {
                outExpiresIn.set(_outExpiresInPointer.get(ValueLayout.JAVA_INT, 0));
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.EnsureCredentials"&gt;EnsureCredentials()&lt;/link&gt; D-Bus method on this Account. The calling thread is blocked until a reply is received.
     * <p>
     * See goa_account_call_ensure_credentials() for the asynchronous version of this method.
     *
     * @param outExpiresIn Return location for return parameter or {@code null} to ignore.
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    default boolean callEnsureCredentialsSync(@Nullable Out<Integer> outExpiresIn,
            @Nullable Cancellable cancellable) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _outExpiresInPointer = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) AccountMethodHandles.goa_account_call_ensure_credentials_sync.invokeExact(
                        handle(), 
                        (MemorySegment) (outExpiresIn == null ? MemorySegment.NULL : _outExpiresInPointer), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            if (outExpiresIn != null) {
                outExpiresIn.set(_outExpiresInPointer.get(ValueLayout.JAVA_INT, 0));
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.Remove"&gt;Remove()&lt;/link&gt; D-Bus method on this Account.
     * When the operation is finished, {@code callback} will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
     * You can then call goa_account_call_remove_finish() to get the result of the operation.
     * <p>
     * See goa_account_call_remove_sync() for the synchronous, blocking version of this method.
     *
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @param callback A {@code GAsyncReadyCallback} to call when the request is satisfied or {@code null}.
     */
    default void callRemove(@Nullable Cancellable cancellable,
            @Nullable AsyncReadyCallback callback) {
        try (var _arena = Arena.ofConfined()) {
            final Arena _callbackScope = Arena.ofShared();
            if (callback != null) ArenaCloseAction.CLEANER.register(callback, new ArenaCloseAction(_callbackScope));
            try {
                AccountMethodHandles.goa_account_call_remove.invokeExact(handle(), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), 
                        (MemorySegment) (callback == null ? MemorySegment.NULL : callback.toCallback(_callbackScope)), 
                        MemorySegment.NULL);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Finishes an operation started with goa_account_call_remove().
     *
     * @param res The {@code GAsyncResult} obtained from the {@code GAsyncReadyCallback} passed to goa_account_call_remove().
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    default boolean callRemoveFinish(AsyncResult res) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) AccountMethodHandles.goa_account_call_remove_finish.invokeExact(
                        handle(), 
                        (MemorySegment) (res == null ? MemorySegment.NULL : res.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.Remove"&gt;Remove()&lt;/link&gt; D-Bus method on this Account. The calling thread is blocked until a reply is received.
     * <p>
     * See goa_account_call_remove() for the asynchronous version of this method.
     *
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    default boolean callRemoveSync(@Nullable Cancellable cancellable) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) AccountMethodHandles.goa_account_call_remove_sync.invokeExact(
                        handle(), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.EnsureCredentials"&gt;EnsureCredentials()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
     * <p>
     * This method will free {@code invocation}, you cannot use it afterwards.
     *
     * @param invocation A {@code GDBusMethodInvocation}.
     * @param expiresIn Parameter to return.
     */
    default void completeEnsureCredentials(DBusMethodInvocation invocation, int expiresIn) {
        if (invocation instanceof GObject _gobject) {
            GLibLogger.debug("Ref org.gnome.gio.DBusMethodInvocation %ld", _gobject.handle().address());
            _gobject.ref();
        }
        try {
            AccountMethodHandles.goa_account_complete_ensure_credentials.invokeExact(handle(), 
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), 
                    expiresIn);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.Remove"&gt;Remove()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
     * <p>
     * This method will free {@code invocation}, you cannot use it afterwards.
     *
     * @param invocation A {@code GDBusMethodInvocation}.
     */
    default void completeRemove(DBusMethodInvocation invocation) {
        if (invocation instanceof GObject _gobject) {
            GLibLogger.debug("Ref org.gnome.gio.DBusMethodInvocation %ld", _gobject.handle().address());
            _gobject.ref();
        }
        try {
            AccountMethodHandles.goa_account_complete_remove.invokeExact(handle(), 
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()));
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Id"&gt;"Id"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupId() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) AccountMethodHandles.goa_account_dup_id.invokeExact(handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Identity"&gt;"Identity"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupIdentity() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) AccountMethodHandles.goa_account_dup_identity.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PresentationIdentity"&gt;"PresentationIdentity"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupPresentationIdentity() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) AccountMethodHandles.goa_account_dup_presentation_identity.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderIcon"&gt;"ProviderIcon"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupProviderIcon() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) AccountMethodHandles.goa_account_dup_provider_icon.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderName"&gt;"ProviderName"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupProviderName() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) AccountMethodHandles.goa_account_dup_provider_name.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderType"&gt;"ProviderType"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupProviderType() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) AccountMethodHandles.goa_account_dup_provider_type.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.AttentionNeeded"&gt;"AttentionNeeded"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getAttentionNeeded() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_attention_needed", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_attention_needed.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.CalendarDisabled"&gt;"CalendarDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getCalendarDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_calendar_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_calendar_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ChatDisabled"&gt;"ChatDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getChatDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_chat_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_chat_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ContactsDisabled"&gt;"ContactsDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getContactsDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_contacts_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_contacts_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.DocumentsDisabled"&gt;"DocumentsDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default boolean getDocumentsDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_documents_disabled",
                        Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_documents_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.FilesDisabled"&gt;"FilesDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getFilesDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_files_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_files_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Id"&gt;"Id"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Account was constructed. Use goa_account_dup_id() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Account.
     */
    default String getId() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_id", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) AccountMethodHandles.goa_account_get_id.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Identity"&gt;"Identity"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Account was constructed. Use goa_account_dup_identity() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Account.
     */
    default String getIdentity() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_identity", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) AccountMethodHandles.goa_account_get_identity.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.IsLocked"&gt;"IsLocked"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getIsLocked() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_is_locked", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_is_locked.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.IsTemporary"&gt;"IsTemporary"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getIsTemporary() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_is_temporary", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_is_temporary.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MailDisabled"&gt;"MailDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getMailDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_mail_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_mail_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MapsDisabled"&gt;"MapsDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default boolean getMapsDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_maps_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_maps_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MusicDisabled"&gt;"MusicDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getMusicDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_music_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_music_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PhotosDisabled"&gt;"PhotosDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getPhotosDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_photos_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_photos_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PresentationIdentity"&gt;"PresentationIdentity"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Account was constructed. Use goa_account_dup_presentation_identity() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Account.
     */
    default String getPresentationIdentity() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_presentation_identity",
                        Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) AccountMethodHandles.goa_account_get_presentation_identity.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PrintersDisabled"&gt;"PrintersDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default boolean getPrintersDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_printers_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_printers_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderIcon"&gt;"ProviderIcon"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Account was constructed. Use goa_account_dup_provider_icon() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Account.
     */
    default String getProviderIcon() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_provider_icon", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) AccountMethodHandles.goa_account_get_provider_icon.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderName"&gt;"ProviderName"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Account was constructed. Use goa_account_dup_provider_name() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Account.
     */
    default String getProviderName() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_provider_name", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) AccountMethodHandles.goa_account_get_provider_name.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderType"&gt;"ProviderType"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Account was constructed. Use goa_account_dup_provider_type() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Account.
     */
    default String getProviderType() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_provider_type", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) AccountMethodHandles.goa_account_get_provider_type.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ReadLaterDisabled"&gt;"ReadLaterDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default boolean getReadLaterDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_read_later_disabled",
                        Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_read_later_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.TicketingDisabled"&gt;"TicketingDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getTicketingDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_ticketing_disabled",
                        Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_ticketing_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.TodoDisabled"&gt;"TodoDisabled"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default boolean getTodoDisabled() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        AccountIface.getMemoryLayout(), "get_todo_disabled", Account.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) AccountMethodHandles.goa_account_get_todo_disabled.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.AttentionNeeded"&gt;"AttentionNeeded"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setAttentionNeeded(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_attention_needed.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.CalendarDisabled"&gt;"CalendarDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setCalendarDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_calendar_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ChatDisabled"&gt;"ChatDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setChatDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_chat_disabled.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ContactsDisabled"&gt;"ContactsDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setContactsDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_contacts_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.DocumentsDisabled"&gt;"DocumentsDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default void setDocumentsDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_documents_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.FilesDisabled"&gt;"FilesDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setFilesDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_files_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Id"&gt;"Id"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setId(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                AccountMethodHandles.goa_account_set_id.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Identity"&gt;"Identity"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setIdentity(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                AccountMethodHandles.goa_account_set_identity.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.IsLocked"&gt;"IsLocked"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setIsLocked(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_is_locked.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.IsTemporary"&gt;"IsTemporary"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setIsTemporary(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_is_temporary.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MailDisabled"&gt;"MailDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setMailDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_mail_disabled.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MapsDisabled"&gt;"MapsDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default void setMapsDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_maps_disabled.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MusicDisabled"&gt;"MusicDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setMusicDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_music_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PhotosDisabled"&gt;"PhotosDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setPhotosDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_photos_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PresentationIdentity"&gt;"PresentationIdentity"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setPresentationIdentity(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                AccountMethodHandles.goa_account_set_presentation_identity.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PrintersDisabled"&gt;"PrintersDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default void setPrintersDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_printers_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderIcon"&gt;"ProviderIcon"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setProviderIcon(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                AccountMethodHandles.goa_account_set_provider_icon.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderName"&gt;"ProviderName"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setProviderName(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                AccountMethodHandles.goa_account_set_provider_name.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderType"&gt;"ProviderType"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setProviderType(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                AccountMethodHandles.goa_account_set_provider_type.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ReadLaterDisabled"&gt;"ReadLaterDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default void setReadLaterDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_read_later_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.TicketingDisabled"&gt;"TicketingDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     */
    default void setTicketingDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_ticketing_disabled.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.TodoDisabled"&gt;"TodoDisabled"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is both readable and writable, it is meaningful to use this function on both the client- and service-side.
     *
     * @param value The value to set.
     * @deprecated The D-Bus property has been deprecated.
     */
    @Deprecated
    default void setTodoDisabled(boolean value) {
        try {
            AccountMethodHandles.goa_account_set_todo_disabled.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.EnsureCredentials"&gt;EnsureCredentials()&lt;/link&gt; D-Bus method.
     * <p>
     * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_account_complete_ensure_credentials() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @see HandleEnsureCredentialsCallback#run
     */
    default SignalConnection<HandleEnsureCredentialsCallback> onHandleEnsureCredentials(
            HandleEnsureCredentialsCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("handle-ensure-credentials", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "handle-ensure-credentials" signal. See {@link #onHandleEnsureCredentials}.
     */
    default boolean emitHandleEnsureCredentials(DBusMethodInvocation invocation) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _result = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _name = Interop.allocateNativeString("handle-ensure-credentials", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), _result};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
            return _result.get(ValueLayout.JAVA_INT, 0) != 0;
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.Remove"&gt;Remove()&lt;/link&gt; D-Bus method.
     * <p>
     * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_account_complete_remove() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @see HandleRemoveCallback#run
     */
    default SignalConnection<HandleRemoveCallback> onHandleRemove(HandleRemoveCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("handle-remove", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "handle-remove" signal. See {@link #onHandleRemove}.
     */
    default boolean emitHandleRemove(DBusMethodInvocation invocation) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _result = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _name = Interop.allocateNativeString("handle-remove", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), _result};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
            return _result.get(ValueLayout.JAVA_INT, 0) != 0;
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * The AccountImpl type represents a native instance of the Account interface.
     */
    class AccountImpl extends GObject implements Account {
        static {
            Goa.javagi$ensureInitialized();
        }

        /**
         * Creates a new instance of Account for the provided memory address.
         *
         * @param address the memory address of the instance
         */
        public AccountImpl(MemorySegment address) {
            super(address);
        }
    }

    /**
     * Functional interface declaration of the {@code HandleEnsureCredentialsCallback} callback.
     * <p>
     * @see HandleEnsureCredentialsCallback#run
     */
    @FunctionalInterface
    interface HandleEnsureCredentialsCallback extends FunctionPointer {
        /**
         * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.EnsureCredentials"&gt;EnsureCredentials()&lt;/link&gt; D-Bus method.
         * <p>
         * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_account_complete_ensure_credentials() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
         */
        boolean run(DBusMethodInvocation invocation);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default int upcall(MemorySegment sourceAccount, MemorySegment invocation) {
            var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
            if (_invocationCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            var _result = run((DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
            return _result ? 1 : 0;
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), HandleEnsureCredentialsCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    /**
     * Functional interface declaration of the {@code HandleRemoveCallback} callback.
     * <p>
     * @see HandleRemoveCallback#run
     */
    @FunctionalInterface
    interface HandleRemoveCallback extends FunctionPointer {
        /**
         * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Account.Remove"&gt;Remove()&lt;/link&gt; D-Bus method.
         * <p>
         * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_account_complete_remove() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
         */
        boolean run(DBusMethodInvocation invocation);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default int upcall(MemorySegment sourceAccount, MemorySegment invocation) {
            var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
            if (_invocationCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            var _result = run((DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
            return _result ? 1 : 0;
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), HandleRemoveCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    /**
     * Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Account.top_of_page"&gt;org.gnome.OnlineAccounts.Account&lt;/link&gt;.
     */
    class AccountIface extends TypeInterface {
        private Method _handleEnsureCredentialsMethod;

        private Method _handleRemoveMethod;

        private Method _getAttentionNeededMethod;

        private Method _getCalendarDisabledMethod;

        private Method _getChatDisabledMethod;

        private Method _getContactsDisabledMethod;

        private Method _getDocumentsDisabledMethod;

        private Method _getFilesDisabledMethod;

        private Method _getIdMethod;

        private Method _getIdentityMethod;

        private Method _getIsLockedMethod;

        private Method _getIsTemporaryMethod;

        private Method _getMailDisabledMethod;

        private Method _getMapsDisabledMethod;

        private Method _getMusicDisabledMethod;

        private Method _getPhotosDisabledMethod;

        private Method _getPresentationIdentityMethod;

        private Method _getPrintersDisabledMethod;

        private Method _getProviderIconMethod;

        private Method _getProviderNameMethod;

        private Method _getProviderTypeMethod;

        private Method _getReadLaterDisabledMethod;

        private Method _getTicketingDisabledMethod;

        private Method _getTodoDisabledMethod;

        /**
         * Create a AccountIface proxy instance for the provided memory address.
         *
         * @param address the memory address of the native object
         */
        public AccountIface(MemorySegment address) {
            super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
        }

        /**
         * Allocate a new AccountIface.
         *
         * @param arena to control the memory allocation scope
         */
        public AccountIface(Arena arena) {
            super(arena.allocate(getMemoryLayout()));
        }

        /**
         * Allocate a new AccountIface.
         * The memory is allocated with {@link Arena#ofAuto}.
         */
        public AccountIface() {
            super(Arena.ofAuto().allocate(getMemoryLayout()));
        }

        /**
         * The memory layout of the native struct.
         * @return the memory layout
         */
        public static MemoryLayout getMemoryLayout() {
            return MemoryLayout.structLayout(
                TypeInterface.getMemoryLayout().withName("parent_iface"),
                ValueLayout.ADDRESS.withName("handle_ensure_credentials"),
                ValueLayout.ADDRESS.withName("handle_remove"),
                ValueLayout.ADDRESS.withName("get_attention_needed"),
                ValueLayout.ADDRESS.withName("get_calendar_disabled"),
                ValueLayout.ADDRESS.withName("get_chat_disabled"),
                ValueLayout.ADDRESS.withName("get_contacts_disabled"),
                ValueLayout.ADDRESS.withName("get_documents_disabled"),
                ValueLayout.ADDRESS.withName("get_files_disabled"),
                ValueLayout.ADDRESS.withName("get_id"),
                ValueLayout.ADDRESS.withName("get_identity"),
                ValueLayout.ADDRESS.withName("get_is_locked"),
                ValueLayout.ADDRESS.withName("get_is_temporary"),
                ValueLayout.ADDRESS.withName("get_mail_disabled"),
                ValueLayout.ADDRESS.withName("get_maps_disabled"),
                ValueLayout.ADDRESS.withName("get_music_disabled"),
                ValueLayout.ADDRESS.withName("get_photos_disabled"),
                ValueLayout.ADDRESS.withName("get_presentation_identity"),
                ValueLayout.ADDRESS.withName("get_printers_disabled"),
                ValueLayout.ADDRESS.withName("get_provider_icon"),
                ValueLayout.ADDRESS.withName("get_provider_name"),
                ValueLayout.ADDRESS.withName("get_provider_type"),
                ValueLayout.ADDRESS.withName("get_read_later_disabled"),
                ValueLayout.ADDRESS.withName("get_ticketing_disabled"),
                ValueLayout.ADDRESS.withName("get_todo_disabled")
            ).withName("GoaAccountIface");
        }

        /**
         * Override virtual method {@code handle_ensure_credentials}.
         *
         * @param method the method to invoke
         */
        public void overrideHandleEnsureCredentials(Arena arena, Method method) {
            this._handleEnsureCredentialsMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "handleEnsureCredentialsUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("handle_ensure_credentials"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int handleEnsureCredentialsUpcall(MemorySegment object, MemorySegment invocation) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
                if (_invocationCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._handleEnsureCredentialsMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new), (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _handleEnsureCredentialsMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code handle_remove}.
         *
         * @param method the method to invoke
         */
        public void overrideHandleRemove(Arena arena, Method method) {
            this._handleRemoveMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "handleRemoveUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("handle_remove"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int handleRemoveUpcall(MemorySegment object, MemorySegment invocation) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
                if (_invocationCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._handleRemoveMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new), (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _handleRemoveMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_attention_needed}.
         *
         * @param method the method to invoke
         */
        public void overrideGetAttentionNeeded(Arena arena, Method method) {
            this._getAttentionNeededMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getAttentionNeededUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_attention_needed"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getAttentionNeededUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getAttentionNeededMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getAttentionNeededMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_calendar_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetCalendarDisabled(Arena arena, Method method) {
            this._getCalendarDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getCalendarDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_calendar_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getCalendarDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getCalendarDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getCalendarDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_chat_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetChatDisabled(Arena arena, Method method) {
            this._getChatDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getChatDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_chat_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getChatDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getChatDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getChatDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_contacts_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetContactsDisabled(Arena arena, Method method) {
            this._getContactsDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getContactsDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_contacts_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getContactsDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getContactsDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getContactsDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_documents_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetDocumentsDisabled(Arena arena, Method method) {
            this._getDocumentsDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getDocumentsDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_documents_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getDocumentsDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getDocumentsDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getDocumentsDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_files_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetFilesDisabled(Arena arena, Method method) {
            this._getFilesDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getFilesDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_files_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getFilesDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getFilesDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getFilesDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_id}.
         *
         * @param method the method to invoke
         */
        public void overrideGetId(Arena arena, Method method) {
            this._getIdMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getIdUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_id"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getIdUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getIdMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getIdMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_identity}.
         *
         * @param method the method to invoke
         */
        public void overrideGetIdentity(Arena arena, Method method) {
            this._getIdentityMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getIdentityUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_identity"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getIdentityUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getIdentityMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getIdentityMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_is_locked}.
         *
         * @param method the method to invoke
         */
        public void overrideGetIsLocked(Arena arena, Method method) {
            this._getIsLockedMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getIsLockedUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_is_locked"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getIsLockedUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getIsLockedMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getIsLockedMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_is_temporary}.
         *
         * @param method the method to invoke
         */
        public void overrideGetIsTemporary(Arena arena, Method method) {
            this._getIsTemporaryMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getIsTemporaryUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_is_temporary"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getIsTemporaryUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getIsTemporaryMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getIsTemporaryMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_mail_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetMailDisabled(Arena arena, Method method) {
            this._getMailDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getMailDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_mail_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getMailDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getMailDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getMailDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_maps_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetMapsDisabled(Arena arena, Method method) {
            this._getMapsDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getMapsDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_maps_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getMapsDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getMapsDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getMapsDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_music_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetMusicDisabled(Arena arena, Method method) {
            this._getMusicDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getMusicDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_music_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getMusicDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getMusicDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getMusicDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_photos_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetPhotosDisabled(Arena arena, Method method) {
            this._getPhotosDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getPhotosDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_photos_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getPhotosDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getPhotosDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getPhotosDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_presentation_identity}.
         *
         * @param method the method to invoke
         */
        public void overrideGetPresentationIdentity(Arena arena, Method method) {
            this._getPresentationIdentityMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getPresentationIdentityUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_presentation_identity"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getPresentationIdentityUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getPresentationIdentityMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getPresentationIdentityMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_printers_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetPrintersDisabled(Arena arena, Method method) {
            this._getPrintersDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getPrintersDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_printers_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getPrintersDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getPrintersDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getPrintersDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_provider_icon}.
         *
         * @param method the method to invoke
         */
        public void overrideGetProviderIcon(Arena arena, Method method) {
            this._getProviderIconMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getProviderIconUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_provider_icon"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getProviderIconUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getProviderIconMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getProviderIconMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_provider_name}.
         *
         * @param method the method to invoke
         */
        public void overrideGetProviderName(Arena arena, Method method) {
            this._getProviderNameMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getProviderNameUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_provider_name"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getProviderNameUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getProviderNameMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getProviderNameMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_provider_type}.
         *
         * @param method the method to invoke
         */
        public void overrideGetProviderType(Arena arena, Method method) {
            this._getProviderTypeMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getProviderTypeUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_provider_type"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getProviderTypeUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getProviderTypeMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getProviderTypeMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_read_later_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetReadLaterDisabled(Arena arena, Method method) {
            this._getReadLaterDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getReadLaterDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_read_later_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getReadLaterDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getReadLaterDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getReadLaterDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_ticketing_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetTicketingDisabled(Arena arena, Method method) {
            this._getTicketingDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getTicketingDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_ticketing_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getTicketingDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getTicketingDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getTicketingDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_todo_disabled}.
         *
         * @param method the method to invoke
         */
        public void overrideGetTodoDisabled(Arena arena, Method method) {
            this._getTodoDisabledMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), AccountIface.class, "getTodoDisabledUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_todo_disabled"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getTodoDisabledUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Account) InstanceCache.getForType(object, AccountImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getTodoDisabledMethod.invoke((Account) InstanceCache.getForType(object, AccountImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getTodoDisabledMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    interface Builder<B extends io.github.jwharm.javagi.gobject.Builder<B>> extends BuilderInterface {
        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.AttentionNeeded"&gt;"AttentionNeeded"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param attentionNeeded the value for the {@code attention-needed} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setAttentionNeeded(boolean attentionNeeded) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(attentionNeeded);
            addBuilderProperty("attention-needed", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.CalendarDisabled"&gt;"CalendarDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param calendarDisabled the value for the {@code calendar-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setCalendarDisabled(boolean calendarDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(calendarDisabled);
            addBuilderProperty("calendar-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ChatDisabled"&gt;"ChatDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param chatDisabled the value for the {@code chat-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setChatDisabled(boolean chatDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(chatDisabled);
            addBuilderProperty("chat-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ContactsDisabled"&gt;"ContactsDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param contactsDisabled the value for the {@code contacts-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setContactsDisabled(boolean contactsDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(contactsDisabled);
            addBuilderProperty("contacts-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.DocumentsDisabled"&gt;"DocumentsDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param documentsDisabled the value for the {@code documents-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        @Deprecated
        default B setDocumentsDisabled(boolean documentsDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(documentsDisabled);
            addBuilderProperty("documents-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.FilesDisabled"&gt;"FilesDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param filesDisabled the value for the {@code files-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setFilesDisabled(boolean filesDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(filesDisabled);
            addBuilderProperty("files-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Id"&gt;"Id"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param id the value for the {@code id} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setId(String id) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(id);
            addBuilderProperty("id", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.Identity"&gt;"Identity"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param identity the value for the {@code identity} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setIdentity(String identity) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(identity);
            addBuilderProperty("identity", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.IsLocked"&gt;"IsLocked"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param isLocked the value for the {@code is-locked} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setIsLocked(boolean isLocked) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(isLocked);
            addBuilderProperty("is-locked", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.IsTemporary"&gt;"IsTemporary"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param isTemporary the value for the {@code is-temporary} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setIsTemporary(boolean isTemporary) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(isTemporary);
            addBuilderProperty("is-temporary", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MailDisabled"&gt;"MailDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param mailDisabled the value for the {@code mail-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setMailDisabled(boolean mailDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(mailDisabled);
            addBuilderProperty("mail-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MapsDisabled"&gt;"MapsDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param mapsDisabled the value for the {@code maps-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        @Deprecated
        default B setMapsDisabled(boolean mapsDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(mapsDisabled);
            addBuilderProperty("maps-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.MusicDisabled"&gt;"MusicDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param musicDisabled the value for the {@code music-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setMusicDisabled(boolean musicDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(musicDisabled);
            addBuilderProperty("music-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PhotosDisabled"&gt;"PhotosDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param photosDisabled the value for the {@code photos-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setPhotosDisabled(boolean photosDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(photosDisabled);
            addBuilderProperty("photos-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PresentationIdentity"&gt;"PresentationIdentity"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param presentationIdentity the value for the {@code presentation-identity} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setPresentationIdentity(String presentationIdentity) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(presentationIdentity);
            addBuilderProperty("presentation-identity", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.PrintersDisabled"&gt;"PrintersDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param printersDisabled the value for the {@code printers-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        @Deprecated
        default B setPrintersDisabled(boolean printersDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(printersDisabled);
            addBuilderProperty("printers-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderIcon"&gt;"ProviderIcon"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param providerIcon the value for the {@code provider-icon} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setProviderIcon(String providerIcon) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(providerIcon);
            addBuilderProperty("provider-icon", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderName"&gt;"ProviderName"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param providerName the value for the {@code provider-name} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setProviderName(String providerName) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(providerName);
            addBuilderProperty("provider-name", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ProviderType"&gt;"ProviderType"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param providerType the value for the {@code provider-type} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setProviderType(String providerType) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(providerType);
            addBuilderProperty("provider-type", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.ReadLaterDisabled"&gt;"ReadLaterDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param readLaterDisabled the value for the {@code read-later-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        @Deprecated
        default B setReadLaterDisabled(boolean readLaterDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(readLaterDisabled);
            addBuilderProperty("read-later-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.TicketingDisabled"&gt;"TicketingDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param ticketingDisabled the value for the {@code ticketing-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setTicketingDisabled(boolean ticketingDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(ticketingDisabled);
            addBuilderProperty("ticketing-disabled", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Account.TodoDisabled"&gt;"TodoDisabled"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is both readable and writable, it is meaningful to both read from it and write to it on both the service- and client-side.
         *
         * @param todoDisabled the value for the {@code todo-disabled} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        @Deprecated
        default B setTodoDisabled(boolean todoDisabled) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(todoDisabled);
            addBuilderProperty("todo-disabled", _value);
            return (B) this;
        }
    }
}
