// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.base.Enumeration;
import io.github.jwharm.javagi.interop.Interop;
import java.lang.IllegalStateException;
import java.lang.Override;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import javax.annotation.processing.Generated;
import org.gnome.glib.Quark;
import org.gnome.glib.Type;

/**
 * Error codes for the {@code Goa.Error} error domain and the
 * corresponding D-Bus error names.
 */
@Generated("io.github.jwharm.JavaGI")
public enum GoaError implements Enumeration {
    /**
     * The operation failed.
     */
    FAILED(0),

    /**
     * The operation is not supported.
     */
    NOT_SUPPORTED(1),

    /**
     * The dialog was dismissed.
     */
    DIALOG_DISMISSED(2),

    /**
     * Account already exists.
     */
    ACCOUNT_EXISTS(3),

    /**
     * Not authorized to perform operation.
     */
    NOT_AUTHORIZED(4),

    /**
     * Invalid SSL certificate.
     */
    SSL(5);

    static {
        Goa.javagi$ensureInitialized();
    }

    private final int value;

    /**
     * Create a new GoaError for the provided value
     *
     * @param value the enum value
     */
    private GoaError(int value) {
        this.value = value;
    }

    /**
     * Create a new GoaError for the provided value
     *
     * @param value the enum value
     * @return the enum for the provided value
     */
    public static GoaError of(int value) {
        return switch(value) {
            case 0 -> FAILED;
            case 1 -> NOT_SUPPORTED;
            case 2 -> DIALOG_DISMISSED;
            case 3 -> ACCOUNT_EXISTS;
            case 4 -> NOT_AUTHORIZED;
            case 5 -> SSL;
            default -> throw new IllegalStateException("Unexpected value: " + value);
        } ;
    }

    /**
     * Get the numeric value of this enum
     *
     * @return the enum value
     */
    @Override
    public int getValue() {
        return value;
    }

    /**
     * Get the GType of the GoaError class
     *
     * @return the GType
     */
    public static Type getType() {
        return Interop.getType("goa_error_get_type");
    }

    /**
     * Registers an error quark for {@code Goa} errors and a domain for D-Bus errors
     *
     * @return The error quark used for {@code Goa} errors.
     */
    public static Quark quark() {
        int _result;
        try {
            _result = (int) MethodHandles.goa_error_quark.invokeExact();
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        Quark _returnValue = new Quark(_result);
        return _returnValue;
    }

    private static final class MethodHandles {
        static final MethodHandle goa_error_quark = Interop.downcallHandle("goa_error_quark",
                FunctionDescriptor.of(ValueLayout.JAVA_INT), false);
    }
}
