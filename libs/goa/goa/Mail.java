// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.Constants;
import io.github.jwharm.javagi.base.Proxy;
import io.github.jwharm.javagi.gobject.BuilderInterface;
import io.github.jwharm.javagi.gobject.InstanceCache;
import io.github.jwharm.javagi.gobject.types.Overrides;
import io.github.jwharm.javagi.gobject.types.Types;
import io.github.jwharm.javagi.interop.Interop;
import io.github.jwharm.javagi.interop.MemoryCleaner;
import java.lang.NullPointerException;
import java.lang.String;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.annotation.processing.Generated;
import org.gnome.gio.DBusInterfaceInfo;
import org.gnome.glib.GLib;
import org.gnome.glib.LogLevelFlags;
import org.gnome.glib.Type;
import org.gnome.gobject.GObject;
import org.gnome.gobject.GObjects;
import org.gnome.gobject.TypeInstance;
import org.gnome.gobject.TypeInterface;
import org.gnome.gobject.Value;

/**
 * Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Mail.top_of_page"&gt;org.gnome.OnlineAccounts.Mail&lt;/link&gt;.
 */
@Generated("io.github.jwharm.JavaGI")
public interface Mail extends Proxy {
    /**
     * Get the GType of the Mail class
     *
     * @return the GType
     */
    static Type getType() {
        return Interop.getType("goa_mail_get_type");
    }

    /**
     * Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Mail.top_of_page"&gt;org.gnome.OnlineAccounts.Mail&lt;/link&gt; D-Bus interface.
     *
     * @return A {@code GDBusInterfaceInfo}. Do not free.
     */
    static DBusInterfaceInfo interfaceInfo() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MailMethodHandles.goa_mail_interface_info.invokeExact();
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        DBusInterfaceInfo _returnValue = MemorySegment.NULL.equals(_result) ? null : new DBusInterfaceInfo(_result);
        _returnValue.address = GObjects.boxedCopy(DBusInterfaceInfo.getType(), _returnValue.handle());
        MemoryCleaner.takeOwnership(_returnValue);
        MemoryCleaner.setBoxedType(_returnValue, DBusInterfaceInfo.getType());
        return _returnValue;
    }

    /**
     * Overrides all {@code GObject} properties in the {@code GoaMail} interface for a concrete class.
     * The properties are overridden in the order they are defined.
     *
     * @param klass The class structure for a {@code GObject} derived class.
     * @param propertyIdBegin The property id to assign to the first overridden property.
     * @return The last property id.
     */
    static int overrideProperties(GObject.ObjectClass klass, int propertyIdBegin) {
        int _result;
        try {
            _result = (int) MailMethodHandles.goa_mail_override_properties.invokeExact(
                    (MemorySegment) (klass == null ? MemorySegment.NULL : klass.handle()), 
                    propertyIdBegin);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        int _returnValue = _result;
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.EmailAddress"&gt;"EmailAddress"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupEmailAddress() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MailMethodHandles.goa_mail_dup_email_address.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapHost"&gt;"ImapHost"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupImapHost() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MailMethodHandles.goa_mail_dup_imap_host.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUserName"&gt;"ImapUserName"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupImapUserName() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MailMethodHandles.goa_mail_dup_imap_user_name.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.Name"&gt;"Name"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupName() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MailMethodHandles.goa_mail_dup_name.invokeExact(handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpHost"&gt;"SmtpHost"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupSmtpHost() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MailMethodHandles.goa_mail_dup_smtp_host.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUserName"&gt;"SmtpUserName"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupSmtpUserName() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MailMethodHandles.goa_mail_dup_smtp_user_name.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.EmailAddress"&gt;"EmailAddress"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Mail was constructed. Use goa_mail_dup_email_address() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Mail.
     */
    default String getEmailAddress() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_email_address", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) MailMethodHandles.goa_mail_get_email_address.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapAcceptSslErrors"&gt;"ImapAcceptSslErrors"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getImapAcceptSslErrors() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_imap_accept_ssl_errors", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_imap_accept_ssl_errors.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapHost"&gt;"ImapHost"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Mail was constructed. Use goa_mail_dup_imap_host() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Mail.
     */
    default String getImapHost() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_imap_host", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) MailMethodHandles.goa_mail_get_imap_host.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapSupported"&gt;"ImapSupported"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getImapSupported() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_imap_supported", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_imap_supported.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUseSsl"&gt;"ImapUseSsl"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getImapUseSsl() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_imap_use_ssl", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_imap_use_ssl.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUseTls"&gt;"ImapUseTls"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getImapUseTls() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_imap_use_tls", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_imap_use_tls.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUserName"&gt;"ImapUserName"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Mail was constructed. Use goa_mail_dup_imap_user_name() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Mail.
     */
    default String getImapUserName() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_imap_user_name", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) MailMethodHandles.goa_mail_get_imap_user_name.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.Name"&gt;"Name"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Mail was constructed. Use goa_mail_dup_name() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Mail.
     */
    default String getName() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_name", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) MailMethodHandles.goa_mail_get_name.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAcceptSslErrors"&gt;"SmtpAcceptSslErrors"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpAcceptSslErrors() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_accept_ssl_errors", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_accept_ssl_errors.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthLogin"&gt;"SmtpAuthLogin"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpAuthLogin() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_auth_login", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_auth_login.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthPlain"&gt;"SmtpAuthPlain"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpAuthPlain() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_auth_plain", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_auth_plain.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthXoauth2"&gt;"SmtpAuthXoauth2"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpAuthXoauth2() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_auth_xoauth2", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_auth_xoauth2.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpHost"&gt;"SmtpHost"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Mail was constructed. Use goa_mail_dup_smtp_host() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Mail.
     */
    default String getSmtpHost() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_host", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) MailMethodHandles.goa_mail_get_smtp_host.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpSupported"&gt;"SmtpSupported"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpSupported() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_supported", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_supported.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseAuth"&gt;"SmtpUseAuth"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpUseAuth() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_use_auth", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_use_auth.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseSsl"&gt;"SmtpUseSsl"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpUseSsl() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_use_ssl", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_use_ssl.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseTls"&gt;"SmtpUseTls"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     */
    default boolean getSmtpUseTls() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_use_tls", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) MailMethodHandles.goa_mail_get_smtp_use_tls.invokeExact(handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUserName"&gt;"SmtpUserName"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Mail was constructed. Use goa_mail_dup_smtp_user_name() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Mail.
     */
    default String getSmtpUserName() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        MailIface.getMemoryLayout(), "get_smtp_user_name", Mail.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) MailMethodHandles.goa_mail_get_smtp_user_name.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.EmailAddress"&gt;"EmailAddress"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setEmailAddress(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                MailMethodHandles.goa_mail_set_email_address.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapAcceptSslErrors"&gt;"ImapAcceptSslErrors"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setImapAcceptSslErrors(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_imap_accept_ssl_errors.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapHost"&gt;"ImapHost"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setImapHost(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                MailMethodHandles.goa_mail_set_imap_host.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapSupported"&gt;"ImapSupported"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setImapSupported(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_imap_supported.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUseSsl"&gt;"ImapUseSsl"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setImapUseSsl(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_imap_use_ssl.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUseTls"&gt;"ImapUseTls"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setImapUseTls(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_imap_use_tls.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUserName"&gt;"ImapUserName"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setImapUserName(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                MailMethodHandles.goa_mail_set_imap_user_name.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.Name"&gt;"Name"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setName(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                MailMethodHandles.goa_mail_set_name.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAcceptSslErrors"&gt;"SmtpAcceptSslErrors"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpAcceptSslErrors(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_accept_ssl_errors.invokeExact(handle(), 
                    value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthLogin"&gt;"SmtpAuthLogin"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpAuthLogin(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_auth_login.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthPlain"&gt;"SmtpAuthPlain"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpAuthPlain(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_auth_plain.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthXoauth2"&gt;"SmtpAuthXoauth2"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpAuthXoauth2(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_auth_xoauth2.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpHost"&gt;"SmtpHost"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpHost(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                MailMethodHandles.goa_mail_set_smtp_host.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpSupported"&gt;"SmtpSupported"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpSupported(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_supported.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseAuth"&gt;"SmtpUseAuth"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpUseAuth(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_use_auth.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseSsl"&gt;"SmtpUseSsl"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpUseSsl(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_use_ssl.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseTls"&gt;"SmtpUseTls"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpUseTls(boolean value) {
        try {
            MailMethodHandles.goa_mail_set_smtp_use_tls.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUserName"&gt;"SmtpUserName"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setSmtpUserName(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                MailMethodHandles.goa_mail_set_smtp_user_name.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * The MailImpl type represents a native instance of the Mail interface.
     */
    class MailImpl extends GObject implements Mail {
        static {
            Goa.javagi$ensureInitialized();
        }

        /**
         * Creates a new instance of Mail for the provided memory address.
         *
         * @param address the memory address of the instance
         */
        public MailImpl(MemorySegment address) {
            super(address);
        }
    }

    /**
     * Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Mail.top_of_page"&gt;org.gnome.OnlineAccounts.Mail&lt;/link&gt;.
     */
    class MailIface extends TypeInterface {
        private Method _getEmailAddressMethod;

        private Method _getImapAcceptSslErrorsMethod;

        private Method _getImapHostMethod;

        private Method _getImapSupportedMethod;

        private Method _getImapUseSslMethod;

        private Method _getImapUseTlsMethod;

        private Method _getImapUserNameMethod;

        private Method _getNameMethod;

        private Method _getSmtpAcceptSslErrorsMethod;

        private Method _getSmtpAuthLoginMethod;

        private Method _getSmtpAuthPlainMethod;

        private Method _getSmtpAuthXoauth2Method;

        private Method _getSmtpHostMethod;

        private Method _getSmtpSupportedMethod;

        private Method _getSmtpUseAuthMethod;

        private Method _getSmtpUseSslMethod;

        private Method _getSmtpUseTlsMethod;

        private Method _getSmtpUserNameMethod;

        /**
         * Create a MailIface proxy instance for the provided memory address.
         *
         * @param address the memory address of the native object
         */
        public MailIface(MemorySegment address) {
            super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
        }

        /**
         * Allocate a new MailIface.
         *
         * @param arena to control the memory allocation scope
         */
        public MailIface(Arena arena) {
            super(arena.allocate(getMemoryLayout()));
        }

        /**
         * Allocate a new MailIface.
         * The memory is allocated with {@link Arena#ofAuto}.
         */
        public MailIface() {
            super(Arena.ofAuto().allocate(getMemoryLayout()));
        }

        /**
         * The memory layout of the native struct.
         * @return the memory layout
         */
        public static MemoryLayout getMemoryLayout() {
            return MemoryLayout.structLayout(
                TypeInterface.getMemoryLayout().withName("parent_iface"),
                ValueLayout.ADDRESS.withName("get_email_address"),
                ValueLayout.ADDRESS.withName("get_imap_accept_ssl_errors"),
                ValueLayout.ADDRESS.withName("get_imap_host"),
                ValueLayout.ADDRESS.withName("get_imap_supported"),
                ValueLayout.ADDRESS.withName("get_imap_use_ssl"),
                ValueLayout.ADDRESS.withName("get_imap_use_tls"),
                ValueLayout.ADDRESS.withName("get_imap_user_name"),
                ValueLayout.ADDRESS.withName("get_name"),
                ValueLayout.ADDRESS.withName("get_smtp_accept_ssl_errors"),
                ValueLayout.ADDRESS.withName("get_smtp_auth_login"),
                ValueLayout.ADDRESS.withName("get_smtp_auth_plain"),
                ValueLayout.ADDRESS.withName("get_smtp_auth_xoauth2"),
                ValueLayout.ADDRESS.withName("get_smtp_host"),
                ValueLayout.ADDRESS.withName("get_smtp_supported"),
                ValueLayout.ADDRESS.withName("get_smtp_use_auth"),
                ValueLayout.ADDRESS.withName("get_smtp_use_ssl"),
                ValueLayout.ADDRESS.withName("get_smtp_use_tls"),
                ValueLayout.ADDRESS.withName("get_smtp_user_name")
            ).withName("GoaMailIface");
        }

        /**
         * Override virtual method {@code get_email_address}.
         *
         * @param method the method to invoke
         */
        public void overrideGetEmailAddress(Arena arena, Method method) {
            this._getEmailAddressMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getEmailAddressUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_email_address"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getEmailAddressUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getEmailAddressMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getEmailAddressMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_imap_accept_ssl_errors}.
         *
         * @param method the method to invoke
         */
        public void overrideGetImapAcceptSslErrors(Arena arena, Method method) {
            this._getImapAcceptSslErrorsMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getImapAcceptSslErrorsUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_imap_accept_ssl_errors"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getImapAcceptSslErrorsUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getImapAcceptSslErrorsMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getImapAcceptSslErrorsMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_imap_host}.
         *
         * @param method the method to invoke
         */
        public void overrideGetImapHost(Arena arena, Method method) {
            this._getImapHostMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getImapHostUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_imap_host"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getImapHostUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getImapHostMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getImapHostMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_imap_supported}.
         *
         * @param method the method to invoke
         */
        public void overrideGetImapSupported(Arena arena, Method method) {
            this._getImapSupportedMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getImapSupportedUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_imap_supported"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getImapSupportedUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getImapSupportedMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getImapSupportedMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_imap_use_ssl}.
         *
         * @param method the method to invoke
         */
        public void overrideGetImapUseSsl(Arena arena, Method method) {
            this._getImapUseSslMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getImapUseSslUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_imap_use_ssl"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getImapUseSslUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getImapUseSslMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getImapUseSslMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_imap_use_tls}.
         *
         * @param method the method to invoke
         */
        public void overrideGetImapUseTls(Arena arena, Method method) {
            this._getImapUseTlsMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getImapUseTlsUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_imap_use_tls"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getImapUseTlsUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getImapUseTlsMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getImapUseTlsMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_imap_user_name}.
         *
         * @param method the method to invoke
         */
        public void overrideGetImapUserName(Arena arena, Method method) {
            this._getImapUserNameMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getImapUserNameUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_imap_user_name"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getImapUserNameUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getImapUserNameMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getImapUserNameMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_name}.
         *
         * @param method the method to invoke
         */
        public void overrideGetName(Arena arena, Method method) {
            this._getNameMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getNameUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_name"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getNameUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getNameMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getNameMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_accept_ssl_errors}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpAcceptSslErrors(Arena arena, Method method) {
            this._getSmtpAcceptSslErrorsMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpAcceptSslErrorsUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_accept_ssl_errors"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpAcceptSslErrorsUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpAcceptSslErrorsMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpAcceptSslErrorsMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_auth_login}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpAuthLogin(Arena arena, Method method) {
            this._getSmtpAuthLoginMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpAuthLoginUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_auth_login"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpAuthLoginUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpAuthLoginMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpAuthLoginMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_auth_plain}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpAuthPlain(Arena arena, Method method) {
            this._getSmtpAuthPlainMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpAuthPlainUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_auth_plain"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpAuthPlainUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpAuthPlainMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpAuthPlainMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_auth_xoauth2}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpAuthXoauth2(Arena arena, Method method) {
            this._getSmtpAuthXoauth2Method = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpAuthXoauth2Upcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_auth_xoauth2"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpAuthXoauth2Upcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpAuthXoauth2Method.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpAuthXoauth2Method);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_host}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpHost(Arena arena, Method method) {
            this._getSmtpHostMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpHostUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_host"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getSmtpHostUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getSmtpHostMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpHostMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_supported}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpSupported(Arena arena, Method method) {
            this._getSmtpSupportedMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpSupportedUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_supported"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpSupportedUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpSupportedMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpSupportedMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_use_auth}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpUseAuth(Arena arena, Method method) {
            this._getSmtpUseAuthMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpUseAuthUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_use_auth"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpUseAuthUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpUseAuthMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpUseAuthMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_use_ssl}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpUseSsl(Arena arena, Method method) {
            this._getSmtpUseSslMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpUseSslUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_use_ssl"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpUseSslUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpUseSslMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpUseSslMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_use_tls}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpUseTls(Arena arena, Method method) {
            this._getSmtpUseTlsMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpUseTlsUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_use_tls"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getSmtpUseTlsUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getSmtpUseTlsMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpUseTlsMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_smtp_user_name}.
         *
         * @param method the method to invoke
         */
        public void overrideGetSmtpUserName(Arena arena, Method method) {
            this._getSmtpUserNameMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), MailIface.class, "getSmtpUserNameUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_smtp_user_name"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getSmtpUserNameUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Mail) InstanceCache.getForType(object, MailImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getSmtpUserNameMethod.invoke((Mail) InstanceCache.getForType(object, MailImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getSmtpUserNameMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    interface Builder<B extends io.github.jwharm.javagi.gobject.Builder<B>> extends BuilderInterface {
        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.EmailAddress"&gt;"EmailAddress"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param emailAddress the value for the {@code email-address} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setEmailAddress(String emailAddress) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(emailAddress);
            addBuilderProperty("email-address", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapAcceptSslErrors"&gt;"ImapAcceptSslErrors"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param imapAcceptSslErrors the value for the {@code imap-accept-ssl-errors} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setImapAcceptSslErrors(boolean imapAcceptSslErrors) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(imapAcceptSslErrors);
            addBuilderProperty("imap-accept-ssl-errors", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapHost"&gt;"ImapHost"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param imapHost the value for the {@code imap-host} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setImapHost(String imapHost) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(imapHost);
            addBuilderProperty("imap-host", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapSupported"&gt;"ImapSupported"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param imapSupported the value for the {@code imap-supported} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setImapSupported(boolean imapSupported) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(imapSupported);
            addBuilderProperty("imap-supported", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUseSsl"&gt;"ImapUseSsl"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param imapUseSsl the value for the {@code imap-use-ssl} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setImapUseSsl(boolean imapUseSsl) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(imapUseSsl);
            addBuilderProperty("imap-use-ssl", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUseTls"&gt;"ImapUseTls"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param imapUseTls the value for the {@code imap-use-tls} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setImapUseTls(boolean imapUseTls) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(imapUseTls);
            addBuilderProperty("imap-use-tls", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.ImapUserName"&gt;"ImapUserName"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param imapUserName the value for the {@code imap-user-name} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setImapUserName(String imapUserName) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(imapUserName);
            addBuilderProperty("imap-user-name", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.Name"&gt;"Name"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param name the value for the {@code name} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setName(String name) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(name);
            addBuilderProperty("name", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAcceptSslErrors"&gt;"SmtpAcceptSslErrors"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpAcceptSslErrors the value for the {@code smtp-accept-ssl-errors} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpAcceptSslErrors(boolean smtpAcceptSslErrors) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpAcceptSslErrors);
            addBuilderProperty("smtp-accept-ssl-errors", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthLogin"&gt;"SmtpAuthLogin"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpAuthLogin the value for the {@code smtp-auth-login} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpAuthLogin(boolean smtpAuthLogin) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpAuthLogin);
            addBuilderProperty("smtp-auth-login", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthPlain"&gt;"SmtpAuthPlain"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpAuthPlain the value for the {@code smtp-auth-plain} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpAuthPlain(boolean smtpAuthPlain) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpAuthPlain);
            addBuilderProperty("smtp-auth-plain", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpAuthXoauth2"&gt;"SmtpAuthXoauth2"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpAuthXoauth2 the value for the {@code smtp-auth-xoauth2} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpAuthXoauth2(boolean smtpAuthXoauth2) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpAuthXoauth2);
            addBuilderProperty("smtp-auth-xoauth2", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpHost"&gt;"SmtpHost"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpHost the value for the {@code smtp-host} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpHost(String smtpHost) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(smtpHost);
            addBuilderProperty("smtp-host", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpSupported"&gt;"SmtpSupported"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpSupported the value for the {@code smtp-supported} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpSupported(boolean smtpSupported) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpSupported);
            addBuilderProperty("smtp-supported", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseAuth"&gt;"SmtpUseAuth"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpUseAuth the value for the {@code smtp-use-auth} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpUseAuth(boolean smtpUseAuth) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpUseAuth);
            addBuilderProperty("smtp-use-auth", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseSsl"&gt;"SmtpUseSsl"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpUseSsl the value for the {@code smtp-use-ssl} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpUseSsl(boolean smtpUseSsl) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpUseSsl);
            addBuilderProperty("smtp-use-ssl", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUseTls"&gt;"SmtpUseTls"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpUseTls the value for the {@code smtp-use-tls} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpUseTls(boolean smtpUseTls) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(smtpUseTls);
            addBuilderProperty("smtp-use-tls", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Mail.SmtpUserName"&gt;"SmtpUserName"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param smtpUserName the value for the {@code smtp-user-name} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setSmtpUserName(String smtpUserName) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(smtpUserName);
            addBuilderProperty("smtp-user-name", _value);
            return (B) this;
        }
    }
}
