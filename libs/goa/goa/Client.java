// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.base.FunctionPointer;
import io.github.jwharm.javagi.base.GErrorException;
import io.github.jwharm.javagi.base.GLibLogger;
import io.github.jwharm.javagi.base.TransferOwnership;
import io.github.jwharm.javagi.gobject.InstanceCache;
import io.github.jwharm.javagi.gobject.SignalConnection;
import io.github.jwharm.javagi.gobject.types.Signals;
import io.github.jwharm.javagi.gobject.types.TypeCache;
import io.github.jwharm.javagi.interop.ArenaCloseAction;
import io.github.jwharm.javagi.interop.Arenas;
import io.github.jwharm.javagi.interop.Interop;
import java.lang.FunctionalInterface;
import java.lang.String;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import javax.annotation.processing.Generated;
import org.gnome.gio.AsyncInitable;
import org.gnome.gio.AsyncReadyCallback;
import org.gnome.gio.AsyncResult;
import org.gnome.gio.Cancellable;
import org.gnome.gio.DBusObjectManager;
import org.gnome.gio.Initable;
import org.gnome.glib.List;
import org.gnome.glib.Type;
import org.gnome.gobject.GObject;
import org.gnome.gobject.Value;
import org.jetbrains.annotations.Nullable;

/**
 * {@link Client} is used for accessing the GNOME Online Accounts service
 * from a client program.
 */
@Generated("io.github.jwharm.JavaGI")
public class Client extends GObject implements AsyncInitable, Initable {
    static {
        Goa.javagi$ensureInitialized();
    }

    /**
     * Create a Client proxy instance for the provided memory address.
     *
     * @param address the memory address of the native object
     */
    public Client(MemorySegment address) {
        super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
    }

    /**
     * Creates a new Client.
     */
    public Client() {
        super((MemorySegment) null);
        InstanceCache.newGObject(this, TypeCache.getType(this.getClass()), getMemoryLayout().byteSize(), (Object[]) null);
    }

    /**
     * Get the GType of the Client class
     *
     * @return the GType
     */
    public static Type getType() {
        return Interop.getType("goa_client_get_type");
    }

    /**
     * Returns this instance as if it were its parent type. This is mostly
     * synonymous to the Java {@code super} keyword, but will set the native
     * typeclass function pointers to the parent type. When overriding a native
     * virtual method in Java, "chaining up" with {@code super.methodName()}
     * doesn't work, because it invokes the overridden function pointer again.
     * To chain up, call {@code asParent().methodName()}. This will call the
     * native function pointer of this virtual method in the typeclass of the
     * parent type.
     */
    protected Client asParent() {
        Client _parent = new Client(handle());
        _parent.callParent(true);
        return _parent;
    }

    /**
     * Finishes an operation started with {@link Client#new_}.
     *
     * @param res A {@code GAsyncResult}
     * @return A {@code GoaClient}, or {@code null} with {@code error} set
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    public static Client finish(AsyncResult res) throws GErrorException {
        var _result = constructFinish(res);
        return (Client) InstanceCache.getForType(_result, Client::new);
    }

    private static MemorySegment constructFinish(AsyncResult res) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            MemorySegment _result;
            try {
                _result = (MemorySegment) MethodHandles.goa_client_new_finish.invokeExact(
                        (MemorySegment) (res == null ? MemorySegment.NULL : res.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            return _result;
        }
    }

    /**
     * Synchronously gets a {@link Client}.
     *
     * @param cancellable A {@code GCancellable}
     * @return A {@code GoaClient}, or {@code null} with {@code error} set
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    public static Client sync(@Nullable Cancellable cancellable) throws GErrorException {
        var _result = constructSync(cancellable);
        return (Client) InstanceCache.getForType(_result, Client::new);
    }

    private static MemorySegment constructSync(@Nullable Cancellable cancellable) throws
            GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            MemorySegment _result;
            try {
                _result = (MemorySegment) MethodHandles.goa_client_new_sync.invokeExact(
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            return _result;
        }
    }

    /**
     * Asynchronously gets a {@link Client}.
     * <p>
     * This is a failable asynchronous constructor - when the client is ready,
     * {@code callback} will be invoked and you can use {@link Client#finish} to
     * get the result.
     *
     * @param cancellable A {@code GCancellable}
     * @param callback A callback to call when the operation is complete
     */
    public static void new_(@Nullable Cancellable cancellable,
            @Nullable AsyncReadyCallback callback) {
        try (var _arena = Arena.ofConfined()) {
            final Arena _callbackScope = Arena.ofShared();
            if (callback != null) ArenaCloseAction.CLEANER.register(callback, new ArenaCloseAction(_callbackScope));
            try {
                MethodHandles.goa_client_new.invokeExact(
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), 
                        (MemorySegment) (callback == null ? MemorySegment.NULL : callback.toCallback(_callbackScope)), 
                        MemorySegment.NULL);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Gets all accounts that this Client knows about.
     * <p>
     * The result is a list of {@link GoaObject} instances where each object at
     * least has an {@link Account} interface (that can be obtained via the
     * {@link GoaObject#getAccount} method) but may also implement other
     * interfaces such as {@link Mail} or {@link Files}.
     *
     * @return A list of {@code GoaObject}
     *   instances
     */
    public List<GoaObject> getAccounts() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MethodHandles.goa_client_get_accounts.invokeExact(handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        List<GoaObject> _returnValue = new List<GoaObject>(_result, GoaObject.ObjectImpl::new, (_p -> ((GObject) _p).unref()), TransferOwnership.FULL);
        return _returnValue;
    }

    /**
     * Gets the {@link Manager} for this Client, if any.
     *
     * @return A {@code GoaManager} or {@code null}
     */
    public Manager getManager() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MethodHandles.goa_client_get_manager.invokeExact(handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        Manager _returnValue = (Manager) InstanceCache.getForType(_result, Manager.ManagerImpl::new);
        if (_returnValue instanceof GObject _gobject) {
            GLibLogger.debug("Ref goa.Manager %ld", _gobject.handle().address());
            _gobject.ref();
        }
        return _returnValue;
    }

    /**
     * Gets the {@link org.gnome.gio.DBusObjectManager} used by this Client.
     *
     * @return A {@code GDBusObjectManager}
     */
    public DBusObjectManager getObjectManager() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) MethodHandles.goa_client_get_object_manager.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        DBusObjectManager _returnValue = (DBusObjectManager) InstanceCache.getForType(_result, DBusObjectManager.DBusObjectManagerImpl::new);
        if (_returnValue instanceof GObject _gobject) {
            GLibLogger.debug("Ref org.gnome.gio.DBusObjectManager %ld", _gobject.handle().address());
            _gobject.ref();
        }
        return _returnValue;
    }

    /**
     * Finds and returns the {@link GoaObject} instance whose
     * {@code Goa.Account:id} D-Bus property matches {@code id}.
     *
     * @param id The ID to look for
     * @return the object for the given id
     * @since 3.6
     */
    public GoaObject lookupById(String id) {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _result;
            try {
                _result = (MemorySegment) MethodHandles.goa_client_lookup_by_id.invokeExact(
                        handle(), 
                        (MemorySegment) (id == null ? MemorySegment.NULL : Interop.allocateNativeString(id, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (_result == null || _result.equals(MemorySegment.NULL)) {
                return null;
            }
            GoaObject _returnValue = (GoaObject) InstanceCache.getForType(_result, GoaObject.ObjectImpl::new);
            return _returnValue;
        }
    }

    /**
     * Emitted when {@code object} has been added. See {@link Client#getAccounts}
     * for information about how to use this object.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @see AccountAddedCallback#run
     */
    public SignalConnection<AccountAddedCallback> onAccountAdded(AccountAddedCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("account-added", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "account-added" signal. See {@link #onAccountAdded}.
     */
    public void emitAccountAdded(GoaObject object) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _name = Interop.allocateNativeString("account-added", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (object == null ? MemorySegment.NULL : object.handle())};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Emitted when something on {@code object} changes.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @see AccountChangedCallback#run
     */
    public SignalConnection<AccountChangedCallback> onAccountChanged(
            AccountChangedCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("account-changed", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "account-changed" signal. See {@link #onAccountChanged}.
     */
    public void emitAccountChanged(GoaObject object) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _name = Interop.allocateNativeString("account-changed", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (object == null ? MemorySegment.NULL : object.handle())};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Emitted when {@code object} has been removed.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @see AccountRemovedCallback#run
     */
    public SignalConnection<AccountRemovedCallback> onAccountRemoved(
            AccountRemovedCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("account-removed", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "account-removed" signal. See {@link #onAccountRemoved}.
     */
    public void emitAccountRemoved(GoaObject object) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _name = Interop.allocateNativeString("account-removed", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (object == null ? MemorySegment.NULL : object.handle())};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * A {@link Builder} object constructs a {@code Client}
     * with the specified properties.
     * Use the various {@code set...()} methods to set properties,
     * and finish construction with {@link Builder#build()}.
     */
    public static Builder<? extends Builder> builder() {
        return new Builder<>();
    }

    /**
     * Functional interface declaration of the {@code AccountAddedCallback} callback.
     * <p>
     * @see AccountAddedCallback#run
     */
    @FunctionalInterface
    public interface AccountAddedCallback extends FunctionPointer {
        /**
         * Emitted when {@code object} has been added. See {@link Client#getAccounts}
         * for information about how to use this object.
         */
        void run(GoaObject object);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default void upcall(MemorySegment sourceClient, MemorySegment object) {
            var _objectCached = (GoaObject) InstanceCache.getForType(object, GoaObject.ObjectImpl::new);
            if (_objectCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            run((GoaObject) InstanceCache.getForType(object, GoaObject.ObjectImpl::new));
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.ofVoid(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(java.lang.invoke.MethodHandles.lookup(), AccountAddedCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    /**
     * Functional interface declaration of the {@code AccountChangedCallback} callback.
     * <p>
     * @see AccountChangedCallback#run
     */
    @FunctionalInterface
    public interface AccountChangedCallback extends FunctionPointer {
        /**
         * Emitted when something on {@code object} changes.
         */
        void run(GoaObject object);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default void upcall(MemorySegment sourceClient, MemorySegment object) {
            var _objectCached = (GoaObject) InstanceCache.getForType(object, GoaObject.ObjectImpl::new);
            if (_objectCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            run((GoaObject) InstanceCache.getForType(object, GoaObject.ObjectImpl::new));
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.ofVoid(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(java.lang.invoke.MethodHandles.lookup(), AccountChangedCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    /**
     * Functional interface declaration of the {@code AccountRemovedCallback} callback.
     * <p>
     * @see AccountRemovedCallback#run
     */
    @FunctionalInterface
    public interface AccountRemovedCallback extends FunctionPointer {
        /**
         * Emitted when {@code object} has been removed.
         */
        void run(GoaObject object);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default void upcall(MemorySegment sourceClient, MemorySegment object) {
            var _objectCached = (GoaObject) InstanceCache.getForType(object, GoaObject.ObjectImpl::new);
            if (_objectCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            run((GoaObject) InstanceCache.getForType(object, GoaObject.ObjectImpl::new));
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.ofVoid(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(java.lang.invoke.MethodHandles.lookup(), AccountRemovedCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    public static class ClientClass extends GObject.ObjectClass {
        /**
         * Create a ClientClass proxy instance for the provided memory address.
         *
         * @param address the memory address of the native object
         */
        public ClientClass(MemorySegment address) {
            super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
        }

        /**
         * Allocate a new ClientClass.
         *
         * @param arena to control the memory allocation scope
         */
        public ClientClass(Arena arena) {
            super(arena.allocate(getMemoryLayout()));
        }

        /**
         * Allocate a new ClientClass.
         * The memory is allocated with {@link Arena#ofAuto}.
         */
        public ClientClass() {
            super(Arena.ofAuto().allocate(getMemoryLayout()));
        }

        /**
         * The memory layout of the native struct.
         * @return the memory layout
         */
        public static MemoryLayout getMemoryLayout() {
            return MemoryLayout.structLayout(
                GObject.ObjectClass.getMemoryLayout().withName("parent_class")
            ).withName("GoaClientClass");
        }
    }

    /**
     * Inner class implementing a builder pattern to construct a GObject with
     * properties.
     *
     * @param <B> the type of the Builder that is returned
     */
    public static class Builder<B extends Builder<B>> extends GObject.Builder<B> {
        /**
         * Default constructor for a {@code Builder} object.
         */
        protected Builder() {
        }

        /**
         * Finish building the {@code Client} object. This will call
         * {@link GObject#withProperties} to create a new GObject instance,
         * which is then cast to {@code Client}.
         *
         * @return a new instance of {@code Client} with the properties
         *         that were set in the Builder object.
         */
        public Client build() {
            try {
                var _instance = (Client) GObject.withProperties(Client.getType(), getNames(), getValues());
                connectSignals(_instance.handle());
                return _instance;
            } finally {
                for (Value _value : getValues()) _value.unset();
                getArena().close();
            }
        }

        /**
         * Emitted when {@code object} has been added. See {@link Client#getAccounts}
         * for information about how to use this object.
         *
         * @param  handler the signal handler
         * @return the {@code Builder} instance is returned, to allow method chaining
         * @see    AccountAddedCallback#run
         */
        public B onAccountAdded(AccountAddedCallback handler) {
            connect("account-added", handler);
            return (B) this;
        }

        /**
         * Emitted when something on {@code object} changes.
         *
         * @param  handler the signal handler
         * @return the {@code Builder} instance is returned, to allow method chaining
         * @see    AccountChangedCallback#run
         */
        public B onAccountChanged(AccountChangedCallback handler) {
            connect("account-changed", handler);
            return (B) this;
        }

        /**
         * Emitted when {@code object} has been removed.
         *
         * @param  handler the signal handler
         * @return the {@code Builder} instance is returned, to allow method chaining
         * @see    AccountRemovedCallback#run
         */
        public B onAccountRemoved(AccountRemovedCallback handler) {
            connect("account-removed", handler);
            return (B) this;
        }
    }

    private static final class MethodHandles {
        static final MethodHandle goa_client_new_finish = Interop.downcallHandle(
                "goa_client_new_finish", FunctionDescriptor.of(ValueLayout.ADDRESS,
                ValueLayout.ADDRESS, ValueLayout.ADDRESS), false);

        static final MethodHandle goa_client_new_sync = Interop.downcallHandle(
                "goa_client_new_sync", FunctionDescriptor.of(ValueLayout.ADDRESS,
                ValueLayout.ADDRESS, ValueLayout.ADDRESS), false);

        static final MethodHandle goa_client_new = Interop.downcallHandle("goa_client_new",
                FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, ValueLayout.ADDRESS,
                ValueLayout.ADDRESS), false);

        static final MethodHandle goa_client_get_accounts = Interop.downcallHandle(
                "goa_client_get_accounts", FunctionDescriptor.of(ValueLayout.ADDRESS,
                ValueLayout.ADDRESS), false);

        static final MethodHandle goa_client_get_manager = Interop.downcallHandle(
                "goa_client_get_manager", FunctionDescriptor.of(ValueLayout.ADDRESS,
                ValueLayout.ADDRESS), false);

        static final MethodHandle goa_client_get_object_manager = Interop.downcallHandle(
                "goa_client_get_object_manager", FunctionDescriptor.of(ValueLayout.ADDRESS,
                ValueLayout.ADDRESS), false);

        static final MethodHandle goa_client_lookup_by_id = Interop.downcallHandle(
                "goa_client_lookup_by_id", FunctionDescriptor.of(ValueLayout.ADDRESS,
                ValueLayout.ADDRESS, ValueLayout.ADDRESS), false);
    }
}
