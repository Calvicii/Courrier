// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.Constants;
import io.github.jwharm.javagi.base.FunctionPointer;
import io.github.jwharm.javagi.base.GErrorException;
import io.github.jwharm.javagi.base.GLibLogger;
import io.github.jwharm.javagi.base.Out;
import io.github.jwharm.javagi.base.Proxy;
import io.github.jwharm.javagi.gobject.InstanceCache;
import io.github.jwharm.javagi.gobject.SignalConnection;
import io.github.jwharm.javagi.gobject.types.Signals;
import io.github.jwharm.javagi.interop.ArenaCloseAction;
import io.github.jwharm.javagi.interop.Arenas;
import io.github.jwharm.javagi.interop.Interop;
import io.github.jwharm.javagi.interop.MemoryCleaner;
import java.lang.FunctionalInterface;
import java.lang.String;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.annotation.processing.Generated;
import org.gnome.gio.AsyncReadyCallback;
import org.gnome.gio.AsyncResult;
import org.gnome.gio.Cancellable;
import org.gnome.gio.DBusInterfaceInfo;
import org.gnome.gio.DBusMethodInvocation;
import org.gnome.glib.GLib;
import org.gnome.glib.LogLevelFlags;
import org.gnome.glib.Type;
import org.gnome.gobject.GObject;
import org.gnome.gobject.GObjects;
import org.gnome.gobject.TypeInterface;
import org.jetbrains.annotations.Nullable;

/**
 * Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-PasswordBased.top_of_page"&gt;org.gnome.OnlineAccounts.PasswordBased&lt;/link&gt;.
 *
 * @since 3.6.0
 */
@Generated("io.github.jwharm.JavaGI")
public interface PasswordBased extends Proxy {
    /**
     * Get the GType of the PasswordBased class
     *
     * @return the GType
     */
    static Type getType() {
        return Interop.getType("goa_password_based_get_type");
    }

    /**
     * Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-PasswordBased.top_of_page"&gt;org.gnome.OnlineAccounts.PasswordBased&lt;/link&gt; D-Bus interface.
     *
     * @return A {@code GDBusInterfaceInfo}. Do not free.
     * @since 3.6.0
     */
    static DBusInterfaceInfo interfaceInfo() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) PasswordBasedMethodHandles.goa_password_based_interface_info.invokeExact(
                    );
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        DBusInterfaceInfo _returnValue = MemorySegment.NULL.equals(_result) ? null : new DBusInterfaceInfo(_result);
        _returnValue.address = GObjects.boxedCopy(DBusInterfaceInfo.getType(), _returnValue.handle());
        MemoryCleaner.takeOwnership(_returnValue);
        MemoryCleaner.setBoxedType(_returnValue, DBusInterfaceInfo.getType());
        return _returnValue;
    }

    /**
     * Overrides all {@code GObject} properties in the {@code GoaPasswordBased} interface for a concrete class.
     * The properties are overridden in the order they are defined.
     *
     * @param klass The class structure for a {@code GObject} derived class.
     * @param propertyIdBegin The property id to assign to the first overridden property.
     * @return The last property id.
     * @since 3.6.0
     */
    static int overrideProperties(GObject.ObjectClass klass, int propertyIdBegin) {
        int _result;
        try {
            _result = (int) PasswordBasedMethodHandles.goa_password_based_override_properties.invokeExact(
                    (MemorySegment) (klass == null ? MemorySegment.NULL : klass.handle()), 
                    propertyIdBegin);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        int _returnValue = _result;
        return _returnValue;
    }

    /**
     * Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-PasswordBased.GetPassword"&gt;GetPassword()&lt;/link&gt; D-Bus method on this PasswordBased.
     * When the operation is finished, {@code callback} will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
     * You can then call goa_password_based_call_get_password_finish() to get the result of the operation.
     * <p>
     * See goa_password_based_call_get_password_sync() for the synchronous, blocking version of this method.
     *
     * @param argId Argument to pass with the method invocation.
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @param callback A {@code GAsyncReadyCallback} to call when the request is satisfied or {@code null}.
     * @since 3.6.0
     */
    default void callGetPassword(String argId, @Nullable Cancellable cancellable,
            @Nullable AsyncReadyCallback callback) {
        try (var _arena = Arena.ofConfined()) {
            final Arena _callbackScope = Arena.ofShared();
            if (callback != null) ArenaCloseAction.CLEANER.register(callback, new ArenaCloseAction(_callbackScope));
            try {
                PasswordBasedMethodHandles.goa_password_based_call_get_password.invokeExact(
                        handle(), 
                        (MemorySegment) (argId == null ? MemorySegment.NULL : Interop.allocateNativeString(argId, _arena)), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), 
                        (MemorySegment) (callback == null ? MemorySegment.NULL : callback.toCallback(_callbackScope)), 
                        MemorySegment.NULL);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Finishes an operation started with goa_password_based_call_get_password().
     *
     * @param outPassword Return location for return parameter or {@code null} to ignore.
     * @param res The {@code GAsyncResult} obtained from the {@code GAsyncReadyCallback} passed to goa_password_based_call_get_password().
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     * @since 3.6.0
     */
    default boolean callGetPasswordFinish(@Nullable Out<String> outPassword, AsyncResult res) throws
            GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _outPasswordPointer = _arena.allocate(ValueLayout.ADDRESS);
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) PasswordBasedMethodHandles.goa_password_based_call_get_password_finish.invokeExact(
                        handle(), 
                        (MemorySegment) (outPassword == null ? MemorySegment.NULL : _outPasswordPointer), 
                        (MemorySegment) (res == null ? MemorySegment.NULL : res.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            if (outPassword != null) {
                outPassword.set(Interop.getStringFrom(_outPasswordPointer.get(ValueLayout.ADDRESS, 0), true));
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-PasswordBased.GetPassword"&gt;GetPassword()&lt;/link&gt; D-Bus method on this PasswordBased. The calling thread is blocked until a reply is received.
     * <p>
     * See goa_password_based_call_get_password() for the asynchronous version of this method.
     *
     * @param argId Argument to pass with the method invocation.
     * @param outPassword Return location for return parameter or {@code null} to ignore.
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     * @since 3.6.0
     */
    default boolean callGetPasswordSync(String argId, @Nullable Out<String> outPassword,
            @Nullable Cancellable cancellable) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _outPasswordPointer = _arena.allocate(ValueLayout.ADDRESS);
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) PasswordBasedMethodHandles.goa_password_based_call_get_password_sync.invokeExact(
                        handle(), 
                        (MemorySegment) (argId == null ? MemorySegment.NULL : Interop.allocateNativeString(argId, _arena)), 
                        (MemorySegment) (outPassword == null ? MemorySegment.NULL : _outPasswordPointer), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            if (outPassword != null) {
                outPassword.set(Interop.getStringFrom(_outPasswordPointer.get(ValueLayout.ADDRESS, 0), true));
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-PasswordBased.GetPassword"&gt;GetPassword()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
     * <p>
     * This method will free {@code invocation}, you cannot use it afterwards.
     *
     * @param invocation A {@code GDBusMethodInvocation}.
     * @param password Parameter to return.
     * @since 3.6.0
     */
    default void completeGetPassword(DBusMethodInvocation invocation, String password) {
        try (var _arena = Arena.ofConfined()) {
            if (invocation instanceof GObject _gobject) {
                GLibLogger.debug("Ref org.gnome.gio.DBusMethodInvocation %ld", _gobject.handle().address());
                _gobject.ref();
            }
            try {
                PasswordBasedMethodHandles.goa_password_based_complete_get_password.invokeExact(
                        handle(), 
                        (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), 
                        (MemorySegment) (password == null ? MemorySegment.NULL : Interop.allocateNativeString(password, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-PasswordBased.GetPassword"&gt;GetPassword()&lt;/link&gt; D-Bus method.
     * <p>
     * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_password_based_complete_get_password() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @since 3.6.0
     * @see HandleGetPasswordCallback#run
     */
    default SignalConnection<HandleGetPasswordCallback> onHandleGetPassword(
            HandleGetPasswordCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("handle-get-password", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "handle-get-password" signal. See {@link #onHandleGetPassword}.
     */
    default boolean emitHandleGetPassword(DBusMethodInvocation invocation, String argId) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _result = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _name = Interop.allocateNativeString("handle-get-password", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), 
                    (MemorySegment) (argId == null ? MemorySegment.NULL : Interop.allocateNativeString(argId, _arena)), _result};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
            return _result.get(ValueLayout.JAVA_INT, 0) != 0;
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * The PasswordBasedImpl type represents a native instance of the PasswordBased interface.
     */
    class PasswordBasedImpl extends GObject implements PasswordBased {
        static {
            Goa.javagi$ensureInitialized();
        }

        /**
         * Creates a new instance of PasswordBased for the provided memory address.
         *
         * @param address the memory address of the instance
         */
        public PasswordBasedImpl(MemorySegment address) {
            super(address);
        }
    }

    /**
     * Functional interface declaration of the {@code HandleGetPasswordCallback} callback.
     * <p>
     * @see HandleGetPasswordCallback#run
     */
    @FunctionalInterface
    interface HandleGetPasswordCallback extends FunctionPointer {
        /**
         * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-PasswordBased.GetPassword"&gt;GetPassword()&lt;/link&gt; D-Bus method.
         * <p>
         * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_password_based_complete_get_password() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
         *
         * @since 3.6.0
         */
        boolean run(DBusMethodInvocation invocation, String argId);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default int upcall(MemorySegment sourcePasswordBased, MemorySegment invocation,
                MemorySegment argId) {
            Arena _arena = Arena.ofAuto();
            var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
            if (_invocationCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            var _result = run((DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new), Interop.getStringFrom(argId, false));
            return _result ? 1 : 0;
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), HandleGetPasswordCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    /**
     * Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-PasswordBased.top_of_page"&gt;org.gnome.OnlineAccounts.PasswordBased&lt;/link&gt;.
     *
     * @since 3.6.0
     */
    class PasswordBasedIface extends TypeInterface {
        private Method _handleGetPasswordMethod;

        /**
         * Create a PasswordBasedIface proxy instance for the provided memory address.
         *
         * @param address the memory address of the native object
         */
        public PasswordBasedIface(MemorySegment address) {
            super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
        }

        /**
         * Allocate a new PasswordBasedIface.
         *
         * @param arena to control the memory allocation scope
         */
        public PasswordBasedIface(Arena arena) {
            super(arena.allocate(getMemoryLayout()));
        }

        /**
         * Allocate a new PasswordBasedIface.
         * The memory is allocated with {@link Arena#ofAuto}.
         */
        public PasswordBasedIface() {
            super(Arena.ofAuto().allocate(getMemoryLayout()));
        }

        /**
         * The memory layout of the native struct.
         * @return the memory layout
         */
        public static MemoryLayout getMemoryLayout() {
            return MemoryLayout.structLayout(
                TypeInterface.getMemoryLayout().withName("parent_iface"),
                ValueLayout.ADDRESS.withName("handle_get_password")
            ).withName("GoaPasswordBasedIface");
        }

        /**
         * Override virtual method {@code handle_get_password}.
         *
         * @param method the method to invoke
         */
        public void overrideHandleGetPassword(Arena arena, Method method) {
            this._handleGetPasswordMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), PasswordBasedIface.class, "handleGetPasswordUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("handle_get_password"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int handleGetPasswordUpcall(MemorySegment object, MemorySegment invocation,
                MemorySegment argId) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (PasswordBased) InstanceCache.getForType(object, PasswordBasedImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
                if (_invocationCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._handleGetPasswordMethod.invoke((PasswordBased) InstanceCache.getForType(object, PasswordBasedImpl::new), (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new), Interop.getStringFrom(argId, false));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _handleGetPasswordMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }
}
