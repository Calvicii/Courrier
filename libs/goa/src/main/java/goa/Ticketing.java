// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.Constants;
import io.github.jwharm.javagi.base.FunctionPointer;
import io.github.jwharm.javagi.base.GErrorException;
import io.github.jwharm.javagi.base.GLibLogger;
import io.github.jwharm.javagi.base.Proxy;
import io.github.jwharm.javagi.gobject.BuilderInterface;
import io.github.jwharm.javagi.gobject.InstanceCache;
import io.github.jwharm.javagi.gobject.SignalConnection;
import io.github.jwharm.javagi.gobject.types.Overrides;
import io.github.jwharm.javagi.gobject.types.Signals;
import io.github.jwharm.javagi.gobject.types.Types;
import io.github.jwharm.javagi.interop.ArenaCloseAction;
import io.github.jwharm.javagi.interop.Arenas;
import io.github.jwharm.javagi.interop.Interop;
import io.github.jwharm.javagi.interop.MemoryCleaner;
import java.lang.FunctionalInterface;
import java.lang.NullPointerException;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.annotation.processing.Generated;
import org.gnome.gio.AsyncReadyCallback;
import org.gnome.gio.AsyncResult;
import org.gnome.gio.Cancellable;
import org.gnome.gio.DBusInterfaceInfo;
import org.gnome.gio.DBusMethodInvocation;
import org.gnome.glib.GLib;
import org.gnome.glib.LogLevelFlags;
import org.gnome.glib.Type;
import org.gnome.glib.Variant;
import org.gnome.gobject.GObject;
import org.gnome.gobject.GObjects;
import org.gnome.gobject.TypeInstance;
import org.gnome.gobject.TypeInterface;
import org.gnome.gobject.Value;
import org.jetbrains.annotations.Nullable;

/**
 * Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Ticketing.top_of_page"&gt;org.gnome.OnlineAccounts.Ticketing&lt;/link&gt;.
 *
 * @since 3.6.0
 */
@Generated("io.github.jwharm.JavaGI")
public interface Ticketing extends Proxy {
    /**
     * Get the GType of the Ticketing class
     *
     * @return the GType
     */
    static Type getType() {
        return Interop.getType("goa_ticketing_get_type");
    }

    /**
     * Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Ticketing.top_of_page"&gt;org.gnome.OnlineAccounts.Ticketing&lt;/link&gt; D-Bus interface.
     *
     * @return A {@code GDBusInterfaceInfo}. Do not free.
     * @since 3.6.0
     */
    static DBusInterfaceInfo interfaceInfo() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) TicketingMethodHandles.goa_ticketing_interface_info.invokeExact(
                    );
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        DBusInterfaceInfo _returnValue = MemorySegment.NULL.equals(_result) ? null : new DBusInterfaceInfo(_result);
        _returnValue.address = GObjects.boxedCopy(DBusInterfaceInfo.getType(), _returnValue.handle());
        MemoryCleaner.takeOwnership(_returnValue);
        MemoryCleaner.setBoxedType(_returnValue, DBusInterfaceInfo.getType());
        return _returnValue;
    }

    /**
     * Overrides all {@code GObject} properties in the {@code GoaTicketing} interface for a concrete class.
     * The properties are overridden in the order they are defined.
     *
     * @param klass The class structure for a {@code GObject} derived class.
     * @param propertyIdBegin The property id to assign to the first overridden property.
     * @return The last property id.
     * @since 3.6.0
     */
    static int overrideProperties(GObject.ObjectClass klass, int propertyIdBegin) {
        int _result;
        try {
            _result = (int) TicketingMethodHandles.goa_ticketing_override_properties.invokeExact(
                    (MemorySegment) (klass == null ? MemorySegment.NULL : klass.handle()), 
                    propertyIdBegin);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        int _returnValue = _result;
        return _returnValue;
    }

    /**
     * Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Ticketing.GetTicket"&gt;GetTicket()&lt;/link&gt; D-Bus method on this Ticketing.
     * When the operation is finished, {@code callback} will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
     * You can then call goa_ticketing_call_get_ticket_finish() to get the result of the operation.
     * <p>
     * See goa_ticketing_call_get_ticket_sync() for the synchronous, blocking version of this method.
     *
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @param callback A {@code GAsyncReadyCallback} to call when the request is satisfied or {@code null}.
     * @since 3.6.0
     */
    default void callGetTicket(@Nullable Cancellable cancellable,
            @Nullable AsyncReadyCallback callback) {
        try (var _arena = Arena.ofConfined()) {
            final Arena _callbackScope = Arena.ofShared();
            if (callback != null) ArenaCloseAction.CLEANER.register(callback, new ArenaCloseAction(_callbackScope));
            try {
                TicketingMethodHandles.goa_ticketing_call_get_ticket.invokeExact(handle(), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), 
                        (MemorySegment) (callback == null ? MemorySegment.NULL : callback.toCallback(_callbackScope)), 
                        MemorySegment.NULL);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Finishes an operation started with goa_ticketing_call_get_ticket().
     *
     * @param res The {@code GAsyncResult} obtained from the {@code GAsyncReadyCallback} passed to goa_ticketing_call_get_ticket().
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     * @since 3.6.0
     */
    default boolean callGetTicketFinish(AsyncResult res) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) TicketingMethodHandles.goa_ticketing_call_get_ticket_finish.invokeExact(
                        handle(), 
                        (MemorySegment) (res == null ? MemorySegment.NULL : res.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Ticketing.GetTicket"&gt;GetTicket()&lt;/link&gt; D-Bus method on this Ticketing. The calling thread is blocked until a reply is received.
     * <p>
     * See goa_ticketing_call_get_ticket() for the asynchronous version of this method.
     *
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     * @since 3.6.0
     */
    default boolean callGetTicketSync(@Nullable Cancellable cancellable) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) TicketingMethodHandles.goa_ticketing_call_get_ticket_sync.invokeExact(
                        handle(), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Ticketing.GetTicket"&gt;GetTicket()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
     * <p>
     * This method will free {@code invocation}, you cannot use it afterwards.
     *
     * @param invocation A {@code GDBusMethodInvocation}.
     * @since 3.6.0
     */
    default void completeGetTicket(DBusMethodInvocation invocation) {
        if (invocation instanceof GObject _gobject) {
            GLibLogger.debug("Ref org.gnome.gio.DBusMethodInvocation %ld", _gobject.handle().address());
            _gobject.ref();
        }
        try {
            TicketingMethodHandles.goa_ticketing_complete_get_ticket.invokeExact(handle(), 
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()));
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Ticketing.Details"&gt;"Details"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_variant_unref().
     * @since 3.18
     */
    default Variant dupDetails() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) TicketingMethodHandles.goa_ticketing_dup_details.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        Variant _returnValue = MemorySegment.NULL.equals(_result) ? null : new Variant(_result);
        if (_returnValue != null) {
            MemoryCleaner.takeOwnership(_returnValue);
            MemoryCleaner.setBoxedType(_returnValue, Variant.getType());
        }
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Ticketing.Details"&gt;"Details"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Ticketing was constructed. Use goa_ticketing_dup_details() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Ticketing.
     * @since 3.18
     */
    default Variant getDetails() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        TicketingIface.getMemoryLayout(), "get_details", Ticketing.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) TicketingMethodHandles.goa_ticketing_get_details.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        Variant _returnValue = MemorySegment.NULL.equals(_result) ? null : new Variant(_result);
        return _returnValue;
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Ticketing.Details"&gt;"Details"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     * @since 3.18
     */
    default void setDetails(Variant value) {
        try {
            TicketingMethodHandles.goa_ticketing_set_details.invokeExact(handle(), 
                    (MemorySegment) (value == null ? MemorySegment.NULL : value.handle()));
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Ticketing.GetTicket"&gt;GetTicket()&lt;/link&gt; D-Bus method.
     * <p>
     * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_ticketing_complete_get_ticket() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @since 3.6.0
     * @see HandleGetTicketCallback#run
     */
    default SignalConnection<HandleGetTicketCallback> onHandleGetTicket(
            HandleGetTicketCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("handle-get-ticket", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "handle-get-ticket" signal. See {@link #onHandleGetTicket}.
     */
    default boolean emitHandleGetTicket(DBusMethodInvocation invocation) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _result = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _name = Interop.allocateNativeString("handle-get-ticket", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), _result};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
            return _result.get(ValueLayout.JAVA_INT, 0) != 0;
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * The TicketingImpl type represents a native instance of the Ticketing interface.
     */
    class TicketingImpl extends GObject implements Ticketing {
        static {
            Goa.javagi$ensureInitialized();
        }

        /**
         * Creates a new instance of Ticketing for the provided memory address.
         *
         * @param address the memory address of the instance
         */
        public TicketingImpl(MemorySegment address) {
            super(address);
        }
    }

    /**
     * Functional interface declaration of the {@code HandleGetTicketCallback} callback.
     * <p>
     * @see HandleGetTicketCallback#run
     */
    @FunctionalInterface
    interface HandleGetTicketCallback extends FunctionPointer {
        /**
         * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-Ticketing.GetTicket"&gt;GetTicket()&lt;/link&gt; D-Bus method.
         * <p>
         * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_ticketing_complete_get_ticket() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
         *
         * @since 3.6.0
         */
        boolean run(DBusMethodInvocation invocation);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default int upcall(MemorySegment sourceTicketing, MemorySegment invocation) {
            var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
            if (_invocationCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            var _result = run((DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
            return _result ? 1 : 0;
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), HandleGetTicketCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    /**
     * Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Ticketing.top_of_page"&gt;org.gnome.OnlineAccounts.Ticketing&lt;/link&gt;.
     *
     * @since 3.6.0
     */
    class TicketingIface extends TypeInterface {
        private Method _handleGetTicketMethod;

        private Method _getDetailsMethod;

        /**
         * Create a TicketingIface proxy instance for the provided memory address.
         *
         * @param address the memory address of the native object
         */
        public TicketingIface(MemorySegment address) {
            super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
        }

        /**
         * Allocate a new TicketingIface.
         *
         * @param arena to control the memory allocation scope
         */
        public TicketingIface(Arena arena) {
            super(arena.allocate(getMemoryLayout()));
        }

        /**
         * Allocate a new TicketingIface.
         * The memory is allocated with {@link Arena#ofAuto}.
         */
        public TicketingIface() {
            super(Arena.ofAuto().allocate(getMemoryLayout()));
        }

        /**
         * The memory layout of the native struct.
         * @return the memory layout
         */
        public static MemoryLayout getMemoryLayout() {
            return MemoryLayout.structLayout(
                TypeInterface.getMemoryLayout().withName("parent_iface"),
                ValueLayout.ADDRESS.withName("handle_get_ticket"),
                ValueLayout.ADDRESS.withName("get_details")
            ).withName("GoaTicketingIface");
        }

        /**
         * Override virtual method {@code handle_get_ticket}.
         *
         * @param method the method to invoke
         */
        public void overrideHandleGetTicket(Arena arena, Method method) {
            this._handleGetTicketMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), TicketingIface.class, "handleGetTicketUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("handle_get_ticket"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int handleGetTicketUpcall(MemorySegment object, MemorySegment invocation) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Ticketing) InstanceCache.getForType(object, TicketingImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
                if (_invocationCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._handleGetTicketMethod.invoke((Ticketing) InstanceCache.getForType(object, TicketingImpl::new), (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _handleGetTicketMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_details}.
         *
         * @param method the method to invoke
         */
        public void overrideGetDetails(Arena arena, Method method) {
            this._getDetailsMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), TicketingIface.class, "getDetailsUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_details"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getDetailsUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Ticketing) InstanceCache.getForType(object, TicketingImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (Variant) this._getDetailsMethod.invoke((Ticketing) InstanceCache.getForType(object, TicketingImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return _result.handle();
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getDetailsMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    interface Builder<B extends io.github.jwharm.javagi.gobject.Builder<B>> extends BuilderInterface {
        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Ticketing.Details"&gt;"Details"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param details the value for the {@code details} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         * @since 3.18
         */
        default B setDetails(Variant details) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.VARIANT);
            _value.setVariant(details);
            addBuilderProperty("details", _value);
            return (B) this;
        }
    }
}
