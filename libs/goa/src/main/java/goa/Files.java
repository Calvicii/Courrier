// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.Constants;
import io.github.jwharm.javagi.base.Proxy;
import io.github.jwharm.javagi.gobject.BuilderInterface;
import io.github.jwharm.javagi.gobject.InstanceCache;
import io.github.jwharm.javagi.gobject.types.Overrides;
import io.github.jwharm.javagi.gobject.types.Types;
import io.github.jwharm.javagi.interop.Interop;
import io.github.jwharm.javagi.interop.MemoryCleaner;
import java.lang.NullPointerException;
import java.lang.String;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.annotation.processing.Generated;
import org.gnome.gio.DBusInterfaceInfo;
import org.gnome.glib.GLib;
import org.gnome.glib.LogLevelFlags;
import org.gnome.glib.Type;
import org.gnome.gobject.GObject;
import org.gnome.gobject.GObjects;
import org.gnome.gobject.TypeInstance;
import org.gnome.gobject.TypeInterface;
import org.gnome.gobject.Value;

/**
 * Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Files.top_of_page"&gt;org.gnome.OnlineAccounts.Files&lt;/link&gt;.
 *
 * @since 3.8.0
 */
@Generated("io.github.jwharm.JavaGI")
public interface Files extends Proxy {
    /**
     * Get the GType of the Files class
     *
     * @return the GType
     */
    static Type getType() {
        return Interop.getType("goa_files_get_type");
    }

    /**
     * Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Files.top_of_page"&gt;org.gnome.OnlineAccounts.Files&lt;/link&gt; D-Bus interface.
     *
     * @return A {@code GDBusInterfaceInfo}. Do not free.
     * @since 3.8.0
     */
    static DBusInterfaceInfo interfaceInfo() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) FilesMethodHandles.goa_files_interface_info.invokeExact();
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        DBusInterfaceInfo _returnValue = MemorySegment.NULL.equals(_result) ? null : new DBusInterfaceInfo(_result);
        _returnValue.address = GObjects.boxedCopy(DBusInterfaceInfo.getType(), _returnValue.handle());
        MemoryCleaner.takeOwnership(_returnValue);
        MemoryCleaner.setBoxedType(_returnValue, DBusInterfaceInfo.getType());
        return _returnValue;
    }

    /**
     * Overrides all {@code GObject} properties in the {@code GoaFiles} interface for a concrete class.
     * The properties are overridden in the order they are defined.
     *
     * @param klass The class structure for a {@code GObject} derived class.
     * @param propertyIdBegin The property id to assign to the first overridden property.
     * @return The last property id.
     * @since 3.8.0
     */
    static int overrideProperties(GObject.ObjectClass klass, int propertyIdBegin) {
        int _result;
        try {
            _result = (int) FilesMethodHandles.goa_files_override_properties.invokeExact(
                    (MemorySegment) (klass == null ? MemorySegment.NULL : klass.handle()), 
                    propertyIdBegin);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        int _returnValue = _result;
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Files.Uri"&gt;"Uri"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     * @since 3.8.0
     */
    default String dupUri() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) FilesMethodHandles.goa_files_dup_uri.invokeExact(handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Files.AcceptSslErrors"&gt;"AcceptSslErrors"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value.
     * @since 3.8.0
     */
    default boolean getAcceptSslErrors() {
        int _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        FilesIface.getMemoryLayout(), "get_accept_ssl_errors", Files.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (int) Interop.downcallHandle(_func, _fdesc).invokeExact(handle());
            } else {
                _result = (int) FilesMethodHandles.goa_files_get_accept_ssl_errors.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        boolean _returnValue = _result != 0;
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Files.Uri"&gt;"Uri"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this Files was constructed. Use goa_files_dup_uri() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this Files.
     * @since 3.8.0
     */
    default String getUri() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        FilesIface.getMemoryLayout(), "get_uri", Files.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) FilesMethodHandles.goa_files_get_uri.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Files.AcceptSslErrors"&gt;"AcceptSslErrors"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     * @since 3.8.0
     */
    default void setAcceptSslErrors(boolean value) {
        try {
            FilesMethodHandles.goa_files_set_accept_ssl_errors.invokeExact(handle(), value ? 1 : 0);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Files.Uri"&gt;"Uri"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     * @since 3.8.0
     */
    default void setUri(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                FilesMethodHandles.goa_files_set_uri.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * The FilesImpl type represents a native instance of the Files interface.
     */
    class FilesImpl extends GObject implements Files {
        static {
            Goa.javagi$ensureInitialized();
        }

        /**
         * Creates a new instance of Files for the provided memory address.
         *
         * @param address the memory address of the instance
         */
        public FilesImpl(MemorySegment address) {
            super(address);
        }
    }

    /**
     * Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-Files.top_of_page"&gt;org.gnome.OnlineAccounts.Files&lt;/link&gt;.
     *
     * @since 3.8.0
     */
    class FilesIface extends TypeInterface {
        private Method _getAcceptSslErrorsMethod;

        private Method _getUriMethod;

        /**
         * Create a FilesIface proxy instance for the provided memory address.
         *
         * @param address the memory address of the native object
         */
        public FilesIface(MemorySegment address) {
            super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
        }

        /**
         * Allocate a new FilesIface.
         *
         * @param arena to control the memory allocation scope
         */
        public FilesIface(Arena arena) {
            super(arena.allocate(getMemoryLayout()));
        }

        /**
         * Allocate a new FilesIface.
         * The memory is allocated with {@link Arena#ofAuto}.
         */
        public FilesIface() {
            super(Arena.ofAuto().allocate(getMemoryLayout()));
        }

        /**
         * The memory layout of the native struct.
         * @return the memory layout
         */
        public static MemoryLayout getMemoryLayout() {
            return MemoryLayout.structLayout(
                TypeInterface.getMemoryLayout().withName("parent_iface"),
                ValueLayout.ADDRESS.withName("get_accept_ssl_errors"),
                ValueLayout.ADDRESS.withName("get_uri")
            ).withName("GoaFilesIface");
        }

        /**
         * Override virtual method {@code get_accept_ssl_errors}.
         *
         * @param method the method to invoke
         */
        public void overrideGetAcceptSslErrors(Arena arena, Method method) {
            this._getAcceptSslErrorsMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), FilesIface.class, "getAcceptSslErrorsUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_accept_ssl_errors"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int getAcceptSslErrorsUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Files) InstanceCache.getForType(object, FilesImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._getAcceptSslErrorsMethod.invoke((Files) InstanceCache.getForType(object, FilesImpl::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getAcceptSslErrorsMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_uri}.
         *
         * @param method the method to invoke
         */
        public void overrideGetUri(Arena arena, Method method) {
            this._getUriMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), FilesIface.class, "getUriUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_uri"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getUriUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (Files) InstanceCache.getForType(object, FilesImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getUriMethod.invoke((Files) InstanceCache.getForType(object, FilesImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getUriMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    interface Builder<B extends io.github.jwharm.javagi.gobject.Builder<B>> extends BuilderInterface {
        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Files.AcceptSslErrors"&gt;"AcceptSslErrors"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param acceptSslErrors the value for the {@code accept-ssl-errors} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         * @since 3.8.0
         */
        default B setAcceptSslErrors(boolean acceptSslErrors) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.BOOLEAN);
            _value.setBoolean(acceptSslErrors);
            addBuilderProperty("accept-ssl-errors", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-Files.Uri"&gt;"Uri"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param uri the value for the {@code uri} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         * @since 3.8.0
         */
        default B setUri(String uri) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(uri);
            addBuilderProperty("uri", _value);
            return (B) this;
        }
    }
}
