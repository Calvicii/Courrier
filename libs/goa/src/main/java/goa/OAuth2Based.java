// This file was automatically generated by Java-GI. Do not edit this file
// directly! Visit <https://github.com/jwharm/java-gi/> for more information.
//
// The API documentation in this file was derived from GObject-Introspection
// metadata and may include text or comments from the original C sources.
//
// Copyright (c), upstream authors as identified in the GObject-Introspection
// metadata.
//
// This generated file is distributed under the same license as the original
// GObject-Introspection data, unless otherwise specified. Users of this file
// are responsible for complying with any licenses or terms required by the
// original authors.
//
// THIS FILE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT.
//
package goa;

import io.github.jwharm.javagi.Constants;
import io.github.jwharm.javagi.base.FunctionPointer;
import io.github.jwharm.javagi.base.GErrorException;
import io.github.jwharm.javagi.base.GLibLogger;
import io.github.jwharm.javagi.base.Out;
import io.github.jwharm.javagi.base.Proxy;
import io.github.jwharm.javagi.gobject.BuilderInterface;
import io.github.jwharm.javagi.gobject.InstanceCache;
import io.github.jwharm.javagi.gobject.SignalConnection;
import io.github.jwharm.javagi.gobject.types.Overrides;
import io.github.jwharm.javagi.gobject.types.Signals;
import io.github.jwharm.javagi.gobject.types.Types;
import io.github.jwharm.javagi.interop.ArenaCloseAction;
import io.github.jwharm.javagi.interop.Arenas;
import io.github.jwharm.javagi.interop.Interop;
import io.github.jwharm.javagi.interop.MemoryCleaner;
import java.lang.FunctionalInterface;
import java.lang.Integer;
import java.lang.NullPointerException;
import java.lang.String;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.ValueLayout;
import java.lang.invoke.MethodHandle;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import javax.annotation.processing.Generated;
import org.gnome.gio.AsyncReadyCallback;
import org.gnome.gio.AsyncResult;
import org.gnome.gio.Cancellable;
import org.gnome.gio.DBusInterfaceInfo;
import org.gnome.gio.DBusMethodInvocation;
import org.gnome.glib.GLib;
import org.gnome.glib.LogLevelFlags;
import org.gnome.glib.Type;
import org.gnome.gobject.GObject;
import org.gnome.gobject.GObjects;
import org.gnome.gobject.TypeInstance;
import org.gnome.gobject.TypeInterface;
import org.gnome.gobject.Value;
import org.jetbrains.annotations.Nullable;

/**
 * Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-OAuth2Based.top_of_page"&gt;org.gnome.OnlineAccounts.OAuth2Based&lt;/link&gt;.
 */
@Generated("io.github.jwharm.JavaGI")
public interface OAuth2Based extends Proxy {
    /**
     * Get the GType of the OAuth2Based class
     *
     * @return the GType
     */
    static Type getType() {
        return Interop.getType("goa_oauth2_based_get_type");
    }

    /**
     * Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-OAuth2Based.top_of_page"&gt;org.gnome.OnlineAccounts.OAuth2Based&lt;/link&gt; D-Bus interface.
     *
     * @return A {@code GDBusInterfaceInfo}. Do not free.
     */
    static DBusInterfaceInfo interfaceInfo() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) OAuth2BasedMethodHandles.goa_oauth2_based_interface_info.invokeExact(
                    );
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        DBusInterfaceInfo _returnValue = MemorySegment.NULL.equals(_result) ? null : new DBusInterfaceInfo(_result);
        _returnValue.address = GObjects.boxedCopy(DBusInterfaceInfo.getType(), _returnValue.handle());
        MemoryCleaner.takeOwnership(_returnValue);
        MemoryCleaner.setBoxedType(_returnValue, DBusInterfaceInfo.getType());
        return _returnValue;
    }

    /**
     * Overrides all {@code GObject} properties in the {@code GoaOAuth2Based} interface for a concrete class.
     * The properties are overridden in the order they are defined.
     *
     * @param klass The class structure for a {@code GObject} derived class.
     * @param propertyIdBegin The property id to assign to the first overridden property.
     * @return The last property id.
     */
    static int overrideProperties(GObject.ObjectClass klass, int propertyIdBegin) {
        int _result;
        try {
            _result = (int) OAuth2BasedMethodHandles.goa_oauth2_based_override_properties.invokeExact(
                    (MemorySegment) (klass == null ? MemorySegment.NULL : klass.handle()), 
                    propertyIdBegin);
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        int _returnValue = _result;
        return _returnValue;
    }

    /**
     * Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-OAuth2Based.GetAccessToken"&gt;GetAccessToken()&lt;/link&gt; D-Bus method on this OAuth2Based.
     * When the operation is finished, {@code callback} will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
     * You can then call goa_oauth2_based_call_get_access_token_finish() to get the result of the operation.
     * <p>
     * See goa_oauth2_based_call_get_access_token_sync() for the synchronous, blocking version of this method.
     *
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @param callback A {@code GAsyncReadyCallback} to call when the request is satisfied or {@code null}.
     */
    default void callGetAccessToken(@Nullable Cancellable cancellable,
            @Nullable AsyncReadyCallback callback) {
        try (var _arena = Arena.ofConfined()) {
            final Arena _callbackScope = Arena.ofShared();
            if (callback != null) ArenaCloseAction.CLEANER.register(callback, new ArenaCloseAction(_callbackScope));
            try {
                OAuth2BasedMethodHandles.goa_oauth2_based_call_get_access_token.invokeExact(
                        handle(), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), 
                        (MemorySegment) (callback == null ? MemorySegment.NULL : callback.toCallback(_callbackScope)), 
                        MemorySegment.NULL);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Finishes an operation started with goa_oauth2_based_call_get_access_token().
     *
     * @param outAccessToken Return location for return parameter or {@code null} to ignore.
     * @param outExpiresIn Return location for return parameter or {@code null} to ignore.
     * @param res The {@code GAsyncResult} obtained from the {@code GAsyncReadyCallback} passed to goa_oauth2_based_call_get_access_token().
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    default boolean callGetAccessTokenFinish(@Nullable Out<String> outAccessToken,
            @Nullable Out<Integer> outExpiresIn, AsyncResult res) throws GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _outAccessTokenPointer = _arena.allocate(ValueLayout.ADDRESS);
            MemorySegment _outExpiresInPointer = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) OAuth2BasedMethodHandles.goa_oauth2_based_call_get_access_token_finish.invokeExact(
                        handle(), 
                        (MemorySegment) (outAccessToken == null ? MemorySegment.NULL : _outAccessTokenPointer), 
                        (MemorySegment) (outExpiresIn == null ? MemorySegment.NULL : _outExpiresInPointer), 
                        (MemorySegment) (res == null ? MemorySegment.NULL : res.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            if (outAccessToken != null) {
                outAccessToken.set(Interop.getStringFrom(_outAccessTokenPointer.get(ValueLayout.ADDRESS, 0), true));
            }
            if (outExpiresIn != null) {
                outExpiresIn.set(_outExpiresInPointer.get(ValueLayout.JAVA_INT, 0));
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-OAuth2Based.GetAccessToken"&gt;GetAccessToken()&lt;/link&gt; D-Bus method on this OAuth2Based. The calling thread is blocked until a reply is received.
     * <p>
     * See goa_oauth2_based_call_get_access_token() for the asynchronous version of this method.
     *
     * @param outAccessToken Return location for return parameter or {@code null} to ignore.
     * @param outExpiresIn Return location for return parameter or {@code null} to ignore.
     * @param cancellable A {@code GCancellable} or {@code null}.
     * @return {@code true} if the call succeeded, {@code false} if {@code error} is set.
     * @throws GErrorException see {@link org.gnome.glib.GError}
     */
    default boolean callGetAccessTokenSync(@Nullable Out<String> outAccessToken,
            @Nullable Out<Integer> outExpiresIn, @Nullable Cancellable cancellable) throws
            GErrorException {
        try (var _arena = Arena.ofConfined()) {
            MemorySegment _outAccessTokenPointer = _arena.allocate(ValueLayout.ADDRESS);
            MemorySegment _outExpiresInPointer = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _gerror = _arena.allocate(ValueLayout.ADDRESS);
            int _result;
            try {
                _result = (int) OAuth2BasedMethodHandles.goa_oauth2_based_call_get_access_token_sync.invokeExact(
                        handle(), 
                        (MemorySegment) (outAccessToken == null ? MemorySegment.NULL : _outAccessTokenPointer), 
                        (MemorySegment) (outExpiresIn == null ? MemorySegment.NULL : _outExpiresInPointer), 
                        (MemorySegment) (cancellable == null ? MemorySegment.NULL : cancellable.handle()), _gerror);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
            if (GErrorException.isErrorSet(_gerror)) {
                throw new GErrorException(_gerror);
            }
            if (outAccessToken != null) {
                outAccessToken.set(Interop.getStringFrom(_outAccessTokenPointer.get(ValueLayout.ADDRESS, 0), true));
            }
            if (outExpiresIn != null) {
                outExpiresIn.set(_outExpiresInPointer.get(ValueLayout.JAVA_INT, 0));
            }
            boolean _returnValue = _result != 0;
            return _returnValue;
        }
    }

    /**
     * Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-OAuth2Based.GetAccessToken"&gt;GetAccessToken()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.
     * <p>
     * This method will free {@code invocation}, you cannot use it afterwards.
     *
     * @param invocation A {@code GDBusMethodInvocation}.
     * @param accessToken Parameter to return.
     * @param expiresIn Parameter to return.
     */
    default void completeGetAccessToken(DBusMethodInvocation invocation, String accessToken,
            int expiresIn) {
        try (var _arena = Arena.ofConfined()) {
            if (invocation instanceof GObject _gobject) {
                GLibLogger.debug("Ref org.gnome.gio.DBusMethodInvocation %ld", _gobject.handle().address());
                _gobject.ref();
            }
            try {
                OAuth2BasedMethodHandles.goa_oauth2_based_complete_get_access_token.invokeExact(
                        handle(), 
                        (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), 
                        (MemorySegment) (accessToken == null ? MemorySegment.NULL : Interop.allocateNativeString(accessToken, _arena)), 
                        expiresIn);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientId"&gt;"ClientId"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupClientId() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) OAuth2BasedMethodHandles.goa_oauth2_based_dup_client_id.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientSecret"&gt;"ClientSecret"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     *
     * @return The property value or {@code null} if the property is not set. The returned value should be freed with g_free().
     */
    default String dupClientSecret() {
        MemorySegment _result;
        try {
            _result = (MemorySegment) OAuth2BasedMethodHandles.goa_oauth2_based_dup_client_secret.invokeExact(
                    handle());
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, true);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientId"&gt;"ClientId"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this OAuth2Based was constructed. Use goa_oauth2_based_dup_client_id() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this OAuth2Based.
     */
    default String getClientId() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        OAuth2BasedIface.getMemoryLayout(), "get_client_id", OAuth2Based.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) OAuth2BasedMethodHandles.goa_oauth2_based_get_client_id.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Gets the value of the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientSecret"&gt;"ClientSecret"&lt;/link&gt; D-Bus property.
     * <p>
     * Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.
     * <p>
     * The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where this OAuth2Based was constructed. Use goa_oauth2_based_dup_client_secret() if on another thread.
     *
     * @return The property value or {@code null} if the property is not set. Do not free the returned value, it belongs to this OAuth2Based.
     */
    default String getClientSecret() {
        MemorySegment _result;
        try {
            if (((TypeInstance) this).callParent()) {
                FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                        ValueLayout.ADDRESS);
                MemorySegment _func = Overrides.lookupVirtualMethodParent(handle(),
                        OAuth2BasedIface.getMemoryLayout(), "get_client_secret",
                        OAuth2Based.getType());
                if (_func.equals(MemorySegment.NULL)) throw new NullPointerException();
                _result = (MemorySegment) Interop.downcallHandle(_func, _fdesc).invokeExact(
                        handle());
            } else {
                _result = (MemorySegment) OAuth2BasedMethodHandles.goa_oauth2_based_get_client_secret.invokeExact(
                        handle());
            }
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
        if (_result == null || _result.equals(MemorySegment.NULL)) {
            return null;
        }
        String _returnValue = Interop.getStringFrom(_result, false);
        return _returnValue;
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientId"&gt;"ClientId"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setClientId(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                OAuth2BasedMethodHandles.goa_oauth2_based_set_client_id.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Sets the &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientSecret"&gt;"ClientSecret"&lt;/link&gt; D-Bus property to {@code value}.
     * <p>
     * Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.
     *
     * @param value The value to set.
     */
    default void setClientSecret(String value) {
        try (var _arena = Arena.ofConfined()) {
            try {
                OAuth2BasedMethodHandles.goa_oauth2_based_set_client_secret.invokeExact(handle(), 
                        (MemorySegment) (value == null ? MemorySegment.NULL : Interop.allocateNativeString(value, _arena)));
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-OAuth2Based.GetAccessToken"&gt;GetAccessToken()&lt;/link&gt; D-Bus method.
     * <p>
     * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_oauth2_based_complete_get_access_token() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
     *
     * @param handler the signal handler
     * @return a signal handler ID to keep track of the signal connection
     * @see HandleGetAccessTokenCallback#run
     */
    default SignalConnection<HandleGetAccessTokenCallback> onHandleGetAccessToken(
            HandleGetAccessTokenCallback handler) {
        try (Arena _arena = Arena.ofConfined()) {
            try {
                var _name = Interop.allocateNativeString("handle-get-access-token", _arena);
                var _callbackArena = Arena.ofShared();
                var _result = (int) (long) Signals.g_signal_connect_data.invokeExact(handle(),
                        _name, handler.toCallback(_callbackArena),
                        Arenas.cacheArena(_callbackArena), Arenas.CLOSE_CB_SYM, 0);
                return new SignalConnection<>(handle(), _result);
            } catch (Throwable _err) {
                throw new AssertionError(_err);
            }
        }
    }

    /**
     * Emits the "handle-get-access-token" signal. See {@link #onHandleGetAccessToken}.
     */
    default boolean emitHandleGetAccessToken(DBusMethodInvocation invocation) {
        try (Arena _arena = Arena.ofConfined()) {
            MemorySegment _result = _arena.allocate(ValueLayout.JAVA_INT);
            MemorySegment _name = Interop.allocateNativeString("handle-get-access-token", _arena);
            Object[] _args = new Object[] {
                    (MemorySegment) (invocation == null ? MemorySegment.NULL : invocation.handle()), _result};
            Signals.g_signal_emit_by_name.invokeExact(handle(), _name, _args);
            return _result.get(ValueLayout.JAVA_INT, 0) != 0;
        } catch (Throwable _err) {
            throw new AssertionError(_err);
        }
    }

    /**
     * The OAuth2BasedImpl type represents a native instance of the OAuth2Based interface.
     */
    class OAuth2BasedImpl extends GObject implements OAuth2Based {
        static {
            Goa.javagi$ensureInitialized();
        }

        /**
         * Creates a new instance of OAuth2Based for the provided memory address.
         *
         * @param address the memory address of the instance
         */
        public OAuth2BasedImpl(MemorySegment address) {
            super(address);
        }
    }

    /**
     * Functional interface declaration of the {@code HandleGetAccessTokenCallback} callback.
     * <p>
     * @see HandleGetAccessTokenCallback#run
     */
    @FunctionalInterface
    interface HandleGetAccessTokenCallback extends FunctionPointer {
        /**
         * Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-OnlineAccounts-OAuth2Based.GetAccessToken"&gt;GetAccessToken()&lt;/link&gt; D-Bus method.
         * <p>
         * If a signal handler returns {@code true}, it means the signal handler will handle the invocation (e.g. take a reference to {@code invocation} and eventually call goa_oauth2_based_complete_get_access_token() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the {@link org.gnome.gio.DBusError#UNKNOWN_METHOD} error is returned.
         */
        boolean run(DBusMethodInvocation invocation);

        /**
         * The {@code upcall} method is called from native code. The parameters
         * are marshaled and {@link #run} is executed.
         */
        default int upcall(MemorySegment sourceOAuth2Based, MemorySegment invocation) {
            var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
            if (_invocationCached instanceof GObject _gobject) {
                _gobject.ref();
            }
            var _result = run((DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
            return _result ? 1 : 0;
        }

        /**
         * Creates a native function pointer to the {@link #upcall} method.
         *
         * @return the native function pointer
         */
        default MemorySegment toCallback(Arena arena) {
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), HandleGetAccessTokenCallback.class, _fdesc);
            return Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
        }
    }

    /**
     * Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-OnlineAccounts-OAuth2Based.top_of_page"&gt;org.gnome.OnlineAccounts.OAuth2Based&lt;/link&gt;.
     */
    class OAuth2BasedIface extends TypeInterface {
        private Method _handleGetAccessTokenMethod;

        private Method _getClientIdMethod;

        private Method _getClientSecretMethod;

        /**
         * Create a OAuth2BasedIface proxy instance for the provided memory address.
         *
         * @param address the memory address of the native object
         */
        public OAuth2BasedIface(MemorySegment address) {
            super(Interop.reinterpret(address, getMemoryLayout().byteSize()));
        }

        /**
         * Allocate a new OAuth2BasedIface.
         *
         * @param arena to control the memory allocation scope
         */
        public OAuth2BasedIface(Arena arena) {
            super(arena.allocate(getMemoryLayout()));
        }

        /**
         * Allocate a new OAuth2BasedIface.
         * The memory is allocated with {@link Arena#ofAuto}.
         */
        public OAuth2BasedIface() {
            super(Arena.ofAuto().allocate(getMemoryLayout()));
        }

        /**
         * The memory layout of the native struct.
         * @return the memory layout
         */
        public static MemoryLayout getMemoryLayout() {
            return MemoryLayout.structLayout(
                TypeInterface.getMemoryLayout().withName("parent_iface"),
                ValueLayout.ADDRESS.withName("handle_get_access_token"),
                ValueLayout.ADDRESS.withName("get_client_id"),
                ValueLayout.ADDRESS.withName("get_client_secret")
            ).withName("GoaOAuth2BasedIface");
        }

        /**
         * Override virtual method {@code handle_get_access_token}.
         *
         * @param method the method to invoke
         */
        public void overrideHandleGetAccessToken(Arena arena, Method method) {
            this._handleGetAccessTokenMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.JAVA_INT,
                    ValueLayout.ADDRESS, ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), OAuth2BasedIface.class, "handleGetAccessTokenUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("handle_get_access_token"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private int handleGetAccessTokenUpcall(MemorySegment object, MemorySegment invocation) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (OAuth2Based) InstanceCache.getForType(object, OAuth2BasedImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _invocationCached = (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new);
                if (_invocationCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (boolean) this._handleGetAccessTokenMethod.invoke((OAuth2Based) InstanceCache.getForType(object, OAuth2BasedImpl::new), (DBusMethodInvocation) InstanceCache.getForType(invocation, DBusMethodInvocation::new));
                return _result ? 1 : 0;
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _handleGetAccessTokenMethod);
                return 0;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_client_id}.
         *
         * @param method the method to invoke
         */
        public void overrideGetClientId(Arena arena, Method method) {
            this._getClientIdMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), OAuth2BasedIface.class, "getClientIdUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_client_id"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getClientIdUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (OAuth2Based) InstanceCache.getForType(object, OAuth2BasedImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getClientIdMethod.invoke((OAuth2Based) InstanceCache.getForType(object, OAuth2BasedImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getClientIdMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }

        /**
         * Override virtual method {@code get_client_secret}.
         *
         * @param method the method to invoke
         */
        public void overrideGetClientSecret(Arena arena, Method method) {
            this._getClientSecretMethod = method;
            FunctionDescriptor _fdesc = FunctionDescriptor.of(ValueLayout.ADDRESS,
                    ValueLayout.ADDRESS);
            MethodHandle _handle = Interop.upcallHandle(MethodHandles.lookup(), OAuth2BasedIface.class, "getClientSecretUpcall", _fdesc);
            MemorySegment _address = Linker.nativeLinker().upcallStub(_handle.bindTo(this), _fdesc, arena);
            getMemoryLayout().varHandle(MemoryLayout.PathElement.groupElement("get_client_secret"))
                    .set(handle(), 0, (method == null ? MemorySegment.NULL : _address));
        }

        private MemorySegment getClientSecretUpcall(MemorySegment object) {
            try {
                Arena _arena = Arena.ofAuto();
                var _objectCached = (OAuth2Based) InstanceCache.getForType(object, OAuth2BasedImpl::new);
                if (_objectCached instanceof GObject _gobject) {
                    _gobject.ref();
                }
                var _result = (String) this._getClientSecretMethod.invoke((OAuth2Based) InstanceCache.getForType(object, OAuth2BasedImpl::new));
                if (_result == null) return MemorySegment.NULL;
                return Interop.allocateNativeString(_result, _arena);
            } catch (InvocationTargetException ite) {
                GLib.log(Constants.LOG_DOMAIN, LogLevelFlags.LEVEL_WARNING, ite.getCause().toString() + " in " + _getClientSecretMethod);
                return MemorySegment.NULL;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    interface Builder<B extends io.github.jwharm.javagi.gobject.Builder<B>> extends BuilderInterface {
        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientId"&gt;"ClientId"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param clientId the value for the {@code client-id} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setClientId(String clientId) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(clientId);
            addBuilderProperty("client-id", _value);
            return (B) this;
        }

        /**
         * Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-OnlineAccounts-OAuth2Based.ClientSecret"&gt;"ClientSecret"&lt;/link&gt;.
         * <p>
         * Since the D-Bus property for this {@code GObject} property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.
         *
         * @param clientSecret the value for the {@code client-secret} property
         * @return the {@code Builder} instance is returned, to allow method chaining
         */
        default B setClientSecret(String clientSecret) {
            Arena _arena = getArena();
            Value _value = new Value(_arena);
            _value.init(Types.STRING);
            _value.setString(clientSecret);
            addBuilderProperty("client-secret", _value);
            return (B) this;
        }
    }
}
